// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rapid.proto

package remoting

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type JoinStatusCode int32

const (
	HOSTNAME_ALREADY_IN_RING JoinStatusCode = 0
	UUID_ALREADY_IN_RING     JoinStatusCode = 1
	SAFE_TO_JOIN             JoinStatusCode = 2
	CONFIG_CHANGED           JoinStatusCode = 3
	MEMBERSHIP_REJECTED      JoinStatusCode = 4
)

var JoinStatusCode_name = map[int32]string{
	0: "HOSTNAME_ALREADY_IN_RING",
	1: "UUID_ALREADY_IN_RING",
	2: "SAFE_TO_JOIN",
	3: "CONFIG_CHANGED",
	4: "MEMBERSHIP_REJECTED",
}

var JoinStatusCode_value = map[string]int32{
	"HOSTNAME_ALREADY_IN_RING": 0,
	"UUID_ALREADY_IN_RING":     1,
	"SAFE_TO_JOIN":             2,
	"CONFIG_CHANGED":           3,
	"MEMBERSHIP_REJECTED":      4,
}

func (JoinStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{0}
}

type EdgeStatus int32

const (
	UP   EdgeStatus = 0
	DOWN EdgeStatus = 1
)

var EdgeStatus_name = map[int32]string{
	0: "UP",
	1: "DOWN",
}

var EdgeStatus_value = map[string]int32{
	"UP":   0,
	"DOWN": 1,
}

func (EdgeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{1}
}

type NodeStatus int32

const (
	OK            NodeStatus = 0
	BOOTSTRAPPING NodeStatus = 1
)

var NodeStatus_name = map[int32]string{
	0: "OK",
	1: "BOOTSTRAPPING",
}

var NodeStatus_value = map[string]int32{
	"OK":            0,
	"BOOTSTRAPPING": 1,
}

func (NodeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{2}
}

type Endpoint struct {
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port     int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *Endpoint) Reset()      { *m = Endpoint{} }
func (*Endpoint) ProtoMessage() {}
func (*Endpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{0}
}
func (m *Endpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Endpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Endpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Endpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Endpoint.Merge(m, src)
}
func (m *Endpoint) XXX_Size() int {
	return m.Size()
}
func (m *Endpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Endpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Endpoint proto.InternalMessageInfo

func (m *Endpoint) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Endpoint) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// All-in-one message type.
type RapidRequest struct {
	// Types that are valid to be assigned to Content:
	//	*RapidRequest_PreJoinMessage
	//	*RapidRequest_JoinMessage
	//	*RapidRequest_BatchedAlertMessage
	//	*RapidRequest_ProbeMessage
	//	*RapidRequest_FastRoundPhase2BMessage
	//	*RapidRequest_Phase1AMessage
	//	*RapidRequest_Phase1BMessage
	//	*RapidRequest_Phase2AMessage
	//	*RapidRequest_Phase2BMessage
	Content isRapidRequest_Content `protobuf_oneof:"content"`
}

func (m *RapidRequest) Reset()      { *m = RapidRequest{} }
func (*RapidRequest) ProtoMessage() {}
func (*RapidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{1}
}
func (m *RapidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RapidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RapidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RapidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RapidRequest.Merge(m, src)
}
func (m *RapidRequest) XXX_Size() int {
	return m.Size()
}
func (m *RapidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RapidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RapidRequest proto.InternalMessageInfo

type isRapidRequest_Content interface {
	isRapidRequest_Content()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type RapidRequest_PreJoinMessage struct {
	PreJoinMessage *PreJoinMessage `protobuf:"bytes,1,opt,name=preJoinMessage,proto3,oneof"`
}
type RapidRequest_JoinMessage struct {
	JoinMessage *JoinMessage `protobuf:"bytes,2,opt,name=joinMessage,proto3,oneof"`
}
type RapidRequest_BatchedAlertMessage struct {
	BatchedAlertMessage *BatchedAlertMessage `protobuf:"bytes,3,opt,name=batchedAlertMessage,proto3,oneof"`
}
type RapidRequest_ProbeMessage struct {
	ProbeMessage *ProbeMessage `protobuf:"bytes,4,opt,name=probeMessage,proto3,oneof"`
}
type RapidRequest_FastRoundPhase2BMessage struct {
	FastRoundPhase2BMessage *FastRoundPhase2BMessage `protobuf:"bytes,5,opt,name=fastRoundPhase2bMessage,proto3,oneof"`
}
type RapidRequest_Phase1AMessage struct {
	Phase1AMessage *Phase1AMessage `protobuf:"bytes,6,opt,name=phase1aMessage,proto3,oneof"`
}
type RapidRequest_Phase1BMessage struct {
	Phase1BMessage *Phase1BMessage `protobuf:"bytes,7,opt,name=phase1bMessage,proto3,oneof"`
}
type RapidRequest_Phase2AMessage struct {
	Phase2AMessage *Phase2AMessage `protobuf:"bytes,8,opt,name=phase2aMessage,proto3,oneof"`
}
type RapidRequest_Phase2BMessage struct {
	Phase2BMessage *Phase2BMessage `protobuf:"bytes,9,opt,name=phase2bMessage,proto3,oneof"`
}

func (*RapidRequest_PreJoinMessage) isRapidRequest_Content()          {}
func (*RapidRequest_JoinMessage) isRapidRequest_Content()             {}
func (*RapidRequest_BatchedAlertMessage) isRapidRequest_Content()     {}
func (*RapidRequest_ProbeMessage) isRapidRequest_Content()            {}
func (*RapidRequest_FastRoundPhase2BMessage) isRapidRequest_Content() {}
func (*RapidRequest_Phase1AMessage) isRapidRequest_Content()          {}
func (*RapidRequest_Phase1BMessage) isRapidRequest_Content()          {}
func (*RapidRequest_Phase2AMessage) isRapidRequest_Content()          {}
func (*RapidRequest_Phase2BMessage) isRapidRequest_Content()          {}

func (m *RapidRequest) GetContent() isRapidRequest_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *RapidRequest) GetPreJoinMessage() *PreJoinMessage {
	if x, ok := m.GetContent().(*RapidRequest_PreJoinMessage); ok {
		return x.PreJoinMessage
	}
	return nil
}

func (m *RapidRequest) GetJoinMessage() *JoinMessage {
	if x, ok := m.GetContent().(*RapidRequest_JoinMessage); ok {
		return x.JoinMessage
	}
	return nil
}

func (m *RapidRequest) GetBatchedAlertMessage() *BatchedAlertMessage {
	if x, ok := m.GetContent().(*RapidRequest_BatchedAlertMessage); ok {
		return x.BatchedAlertMessage
	}
	return nil
}

func (m *RapidRequest) GetProbeMessage() *ProbeMessage {
	if x, ok := m.GetContent().(*RapidRequest_ProbeMessage); ok {
		return x.ProbeMessage
	}
	return nil
}

func (m *RapidRequest) GetFastRoundPhase2BMessage() *FastRoundPhase2BMessage {
	if x, ok := m.GetContent().(*RapidRequest_FastRoundPhase2BMessage); ok {
		return x.FastRoundPhase2BMessage
	}
	return nil
}

func (m *RapidRequest) GetPhase1AMessage() *Phase1AMessage {
	if x, ok := m.GetContent().(*RapidRequest_Phase1AMessage); ok {
		return x.Phase1AMessage
	}
	return nil
}

func (m *RapidRequest) GetPhase1BMessage() *Phase1BMessage {
	if x, ok := m.GetContent().(*RapidRequest_Phase1BMessage); ok {
		return x.Phase1BMessage
	}
	return nil
}

func (m *RapidRequest) GetPhase2AMessage() *Phase2AMessage {
	if x, ok := m.GetContent().(*RapidRequest_Phase2AMessage); ok {
		return x.Phase2AMessage
	}
	return nil
}

func (m *RapidRequest) GetPhase2BMessage() *Phase2BMessage {
	if x, ok := m.GetContent().(*RapidRequest_Phase2BMessage); ok {
		return x.Phase2BMessage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RapidRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RapidRequest_OneofMarshaler, _RapidRequest_OneofUnmarshaler, _RapidRequest_OneofSizer, []interface{}{
		(*RapidRequest_PreJoinMessage)(nil),
		(*RapidRequest_JoinMessage)(nil),
		(*RapidRequest_BatchedAlertMessage)(nil),
		(*RapidRequest_ProbeMessage)(nil),
		(*RapidRequest_FastRoundPhase2BMessage)(nil),
		(*RapidRequest_Phase1AMessage)(nil),
		(*RapidRequest_Phase1BMessage)(nil),
		(*RapidRequest_Phase2AMessage)(nil),
		(*RapidRequest_Phase2BMessage)(nil),
	}
}

func _RapidRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RapidRequest)
	// content
	switch x := m.Content.(type) {
	case *RapidRequest_PreJoinMessage:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PreJoinMessage); err != nil {
			return err
		}
	case *RapidRequest_JoinMessage:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinMessage); err != nil {
			return err
		}
	case *RapidRequest_BatchedAlertMessage:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchedAlertMessage); err != nil {
			return err
		}
	case *RapidRequest_ProbeMessage:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProbeMessage); err != nil {
			return err
		}
	case *RapidRequest_FastRoundPhase2BMessage:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FastRoundPhase2BMessage); err != nil {
			return err
		}
	case *RapidRequest_Phase1AMessage:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Phase1AMessage); err != nil {
			return err
		}
	case *RapidRequest_Phase1BMessage:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Phase1BMessage); err != nil {
			return err
		}
	case *RapidRequest_Phase2AMessage:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Phase2AMessage); err != nil {
			return err
		}
	case *RapidRequest_Phase2BMessage:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Phase2BMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RapidRequest.Content has unexpected type %T", x)
	}
	return nil
}

func _RapidRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RapidRequest)
	switch tag {
	case 1: // content.preJoinMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PreJoinMessage)
		err := b.DecodeMessage(msg)
		m.Content = &RapidRequest_PreJoinMessage{msg}
		return true, err
	case 2: // content.joinMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinMessage)
		err := b.DecodeMessage(msg)
		m.Content = &RapidRequest_JoinMessage{msg}
		return true, err
	case 3: // content.batchedAlertMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchedAlertMessage)
		err := b.DecodeMessage(msg)
		m.Content = &RapidRequest_BatchedAlertMessage{msg}
		return true, err
	case 4: // content.probeMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProbeMessage)
		err := b.DecodeMessage(msg)
		m.Content = &RapidRequest_ProbeMessage{msg}
		return true, err
	case 5: // content.fastRoundPhase2bMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FastRoundPhase2BMessage)
		err := b.DecodeMessage(msg)
		m.Content = &RapidRequest_FastRoundPhase2BMessage{msg}
		return true, err
	case 6: // content.phase1aMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Phase1AMessage)
		err := b.DecodeMessage(msg)
		m.Content = &RapidRequest_Phase1AMessage{msg}
		return true, err
	case 7: // content.phase1bMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Phase1BMessage)
		err := b.DecodeMessage(msg)
		m.Content = &RapidRequest_Phase1BMessage{msg}
		return true, err
	case 8: // content.phase2aMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Phase2AMessage)
		err := b.DecodeMessage(msg)
		m.Content = &RapidRequest_Phase2AMessage{msg}
		return true, err
	case 9: // content.phase2bMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Phase2BMessage)
		err := b.DecodeMessage(msg)
		m.Content = &RapidRequest_Phase2BMessage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RapidRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RapidRequest)
	// content
	switch x := m.Content.(type) {
	case *RapidRequest_PreJoinMessage:
		s := proto.Size(x.PreJoinMessage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RapidRequest_JoinMessage:
		s := proto.Size(x.JoinMessage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RapidRequest_BatchedAlertMessage:
		s := proto.Size(x.BatchedAlertMessage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RapidRequest_ProbeMessage:
		s := proto.Size(x.ProbeMessage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RapidRequest_FastRoundPhase2BMessage:
		s := proto.Size(x.FastRoundPhase2BMessage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RapidRequest_Phase1AMessage:
		s := proto.Size(x.Phase1AMessage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RapidRequest_Phase1BMessage:
		s := proto.Size(x.Phase1BMessage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RapidRequest_Phase2AMessage:
		s := proto.Size(x.Phase2AMessage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RapidRequest_Phase2BMessage:
		s := proto.Size(x.Phase2BMessage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RapidResponse struct {
	// Types that are valid to be assigned to Content:
	//	*RapidResponse_JoinResponse
	//	*RapidResponse_Response
	//	*RapidResponse_ConsensusResponse
	//	*RapidResponse_ProbeResponse
	Content isRapidResponse_Content `protobuf_oneof:"content"`
}

func (m *RapidResponse) Reset()      { *m = RapidResponse{} }
func (*RapidResponse) ProtoMessage() {}
func (*RapidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{2}
}
func (m *RapidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RapidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RapidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RapidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RapidResponse.Merge(m, src)
}
func (m *RapidResponse) XXX_Size() int {
	return m.Size()
}
func (m *RapidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RapidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RapidResponse proto.InternalMessageInfo

type isRapidResponse_Content interface {
	isRapidResponse_Content()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type RapidResponse_JoinResponse struct {
	JoinResponse *JoinResponse `protobuf:"bytes,1,opt,name=joinResponse,proto3,oneof"`
}
type RapidResponse_Response struct {
	Response *Response `protobuf:"bytes,2,opt,name=response,proto3,oneof"`
}
type RapidResponse_ConsensusResponse struct {
	ConsensusResponse *ConsensusResponse `protobuf:"bytes,3,opt,name=consensusResponse,proto3,oneof"`
}
type RapidResponse_ProbeResponse struct {
	ProbeResponse *ProbeResponse `protobuf:"bytes,4,opt,name=probeResponse,proto3,oneof"`
}

func (*RapidResponse_JoinResponse) isRapidResponse_Content()      {}
func (*RapidResponse_Response) isRapidResponse_Content()          {}
func (*RapidResponse_ConsensusResponse) isRapidResponse_Content() {}
func (*RapidResponse_ProbeResponse) isRapidResponse_Content()     {}

func (m *RapidResponse) GetContent() isRapidResponse_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *RapidResponse) GetJoinResponse() *JoinResponse {
	if x, ok := m.GetContent().(*RapidResponse_JoinResponse); ok {
		return x.JoinResponse
	}
	return nil
}

func (m *RapidResponse) GetResponse() *Response {
	if x, ok := m.GetContent().(*RapidResponse_Response); ok {
		return x.Response
	}
	return nil
}

func (m *RapidResponse) GetConsensusResponse() *ConsensusResponse {
	if x, ok := m.GetContent().(*RapidResponse_ConsensusResponse); ok {
		return x.ConsensusResponse
	}
	return nil
}

func (m *RapidResponse) GetProbeResponse() *ProbeResponse {
	if x, ok := m.GetContent().(*RapidResponse_ProbeResponse); ok {
		return x.ProbeResponse
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RapidResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RapidResponse_OneofMarshaler, _RapidResponse_OneofUnmarshaler, _RapidResponse_OneofSizer, []interface{}{
		(*RapidResponse_JoinResponse)(nil),
		(*RapidResponse_Response)(nil),
		(*RapidResponse_ConsensusResponse)(nil),
		(*RapidResponse_ProbeResponse)(nil),
	}
}

func _RapidResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RapidResponse)
	// content
	switch x := m.Content.(type) {
	case *RapidResponse_JoinResponse:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinResponse); err != nil {
			return err
		}
	case *RapidResponse_Response:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Response); err != nil {
			return err
		}
	case *RapidResponse_ConsensusResponse:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConsensusResponse); err != nil {
			return err
		}
	case *RapidResponse_ProbeResponse:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProbeResponse); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RapidResponse.Content has unexpected type %T", x)
	}
	return nil
}

func _RapidResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RapidResponse)
	switch tag {
	case 1: // content.joinResponse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinResponse)
		err := b.DecodeMessage(msg)
		m.Content = &RapidResponse_JoinResponse{msg}
		return true, err
	case 2: // content.response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Response)
		err := b.DecodeMessage(msg)
		m.Content = &RapidResponse_Response{msg}
		return true, err
	case 3: // content.consensusResponse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConsensusResponse)
		err := b.DecodeMessage(msg)
		m.Content = &RapidResponse_ConsensusResponse{msg}
		return true, err
	case 4: // content.probeResponse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProbeResponse)
		err := b.DecodeMessage(msg)
		m.Content = &RapidResponse_ProbeResponse{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RapidResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RapidResponse)
	// content
	switch x := m.Content.(type) {
	case *RapidResponse_JoinResponse:
		s := proto.Size(x.JoinResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RapidResponse_Response:
		s := proto.Size(x.Response)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RapidResponse_ConsensusResponse:
		s := proto.Size(x.ConsensusResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RapidResponse_ProbeResponse:
		s := proto.Size(x.ProbeResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NodeId struct {
	High int64 `protobuf:"varint,1,opt,name=high,proto3" json:"high,omitempty"`
	Low  int64 `protobuf:"varint,2,opt,name=low,proto3" json:"low,omitempty"`
}

func (m *NodeId) Reset()      { *m = NodeId{} }
func (*NodeId) ProtoMessage() {}
func (*NodeId) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{3}
}
func (m *NodeId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeId.Merge(m, src)
}
func (m *NodeId) XXX_Size() int {
	return m.Size()
}
func (m *NodeId) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeId.DiscardUnknown(m)
}

var xxx_messageInfo_NodeId proto.InternalMessageInfo

func (m *NodeId) GetHigh() int64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *NodeId) GetLow() int64 {
	if m != nil {
		return m.Low
	}
	return 0
}

// TODO: JoinMessage and JoinResponse are overloaded because they are being used
// for phase 1 and 2 of the bootstrap.
type PreJoinMessage struct {
	Sender          *Endpoint `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	NodeId          *NodeId   `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	RingNumber      []int32   `protobuf:"varint,3,rep,packed,name=ringNumber,proto3" json:"ringNumber,omitempty"`
	ConfigurationId int64     `protobuf:"varint,4,opt,name=configurationId,proto3" json:"configurationId,omitempty"`
}

func (m *PreJoinMessage) Reset()      { *m = PreJoinMessage{} }
func (*PreJoinMessage) ProtoMessage() {}
func (*PreJoinMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{4}
}
func (m *PreJoinMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreJoinMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreJoinMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreJoinMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreJoinMessage.Merge(m, src)
}
func (m *PreJoinMessage) XXX_Size() int {
	return m.Size()
}
func (m *PreJoinMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PreJoinMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PreJoinMessage proto.InternalMessageInfo

func (m *PreJoinMessage) GetSender() *Endpoint {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *PreJoinMessage) GetNodeId() *NodeId {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *PreJoinMessage) GetRingNumber() []int32 {
	if m != nil {
		return m.RingNumber
	}
	return nil
}

func (m *PreJoinMessage) GetConfigurationId() int64 {
	if m != nil {
		return m.ConfigurationId
	}
	return 0
}

type JoinMessage struct {
	Sender          *Endpoint `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	NodeId          *NodeId   `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	RingNumber      []int32   `protobuf:"varint,3,rep,packed,name=ringNumber,proto3" json:"ringNumber,omitempty"`
	ConfigurationId int64     `protobuf:"varint,4,opt,name=configurationId,proto3" json:"configurationId,omitempty"`
	Metadata        *Metadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *JoinMessage) Reset()      { *m = JoinMessage{} }
func (*JoinMessage) ProtoMessage() {}
func (*JoinMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{5}
}
func (m *JoinMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinMessage.Merge(m, src)
}
func (m *JoinMessage) XXX_Size() int {
	return m.Size()
}
func (m *JoinMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinMessage.DiscardUnknown(m)
}

var xxx_messageInfo_JoinMessage proto.InternalMessageInfo

func (m *JoinMessage) GetSender() *Endpoint {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *JoinMessage) GetNodeId() *NodeId {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *JoinMessage) GetRingNumber() []int32 {
	if m != nil {
		return m.RingNumber
	}
	return nil
}

func (m *JoinMessage) GetConfigurationId() int64 {
	if m != nil {
		return m.ConfigurationId
	}
	return 0
}

func (m *JoinMessage) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type JoinResponse struct {
	Sender          *Endpoint            `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	StatusCode      JoinStatusCode       `protobuf:"varint,2,opt,name=statusCode,proto3,enum=remoting.JoinStatusCode" json:"statusCode,omitempty"`
	ConfigurationId int64                `protobuf:"varint,3,opt,name=configurationId,proto3" json:"configurationId,omitempty"`
	Endpoints       []*Endpoint          `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	Identifiers     []*NodeId            `protobuf:"bytes,5,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	ClusterMetadata map[string]*Metadata `protobuf:"bytes,6,rep,name=clusterMetadata,proto3" json:"clusterMetadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *JoinResponse) Reset()      { *m = JoinResponse{} }
func (*JoinResponse) ProtoMessage() {}
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{6}
}
func (m *JoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinResponse.Merge(m, src)
}
func (m *JoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *JoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JoinResponse proto.InternalMessageInfo

func (m *JoinResponse) GetSender() *Endpoint {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *JoinResponse) GetStatusCode() JoinStatusCode {
	if m != nil {
		return m.StatusCode
	}
	return HOSTNAME_ALREADY_IN_RING
}

func (m *JoinResponse) GetConfigurationId() int64 {
	if m != nil {
		return m.ConfigurationId
	}
	return 0
}

func (m *JoinResponse) GetEndpoints() []*Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *JoinResponse) GetIdentifiers() []*NodeId {
	if m != nil {
		return m.Identifiers
	}
	return nil
}

func (m *JoinResponse) GetClusterMetadata() map[string]*Metadata {
	if m != nil {
		return m.ClusterMetadata
	}
	return nil
}

type BatchedAlertMessage struct {
	Sender   *Endpoint       `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Messages []*AlertMessage `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *BatchedAlertMessage) Reset()      { *m = BatchedAlertMessage{} }
func (*BatchedAlertMessage) ProtoMessage() {}
func (*BatchedAlertMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{7}
}
func (m *BatchedAlertMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchedAlertMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchedAlertMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchedAlertMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchedAlertMessage.Merge(m, src)
}
func (m *BatchedAlertMessage) XXX_Size() int {
	return m.Size()
}
func (m *BatchedAlertMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchedAlertMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BatchedAlertMessage proto.InternalMessageInfo

func (m *BatchedAlertMessage) GetSender() *Endpoint {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *BatchedAlertMessage) GetMessages() []*AlertMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

type AlertMessage struct {
	EdgeSrc         *Endpoint  `protobuf:"bytes,1,opt,name=edgeSrc,proto3" json:"edgeSrc,omitempty"`
	EdgeDst         *Endpoint  `protobuf:"bytes,2,opt,name=edgeDst,proto3" json:"edgeDst,omitempty"`
	EdgeStatus      EdgeStatus `protobuf:"varint,3,opt,name=edgeStatus,proto3,enum=remoting.EdgeStatus" json:"edgeStatus,omitempty"`
	ConfigurationId int64      `protobuf:"varint,4,opt,name=configurationId,proto3" json:"configurationId,omitempty"`
	RingNumber      []int32    `protobuf:"varint,5,rep,packed,name=ringNumber,proto3" json:"ringNumber,omitempty"`
	NodeId          *NodeId    `protobuf:"bytes,6,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Metadata        *Metadata  `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *AlertMessage) Reset()      { *m = AlertMessage{} }
func (*AlertMessage) ProtoMessage() {}
func (*AlertMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{8}
}
func (m *AlertMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlertMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlertMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlertMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlertMessage.Merge(m, src)
}
func (m *AlertMessage) XXX_Size() int {
	return m.Size()
}
func (m *AlertMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AlertMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AlertMessage proto.InternalMessageInfo

func (m *AlertMessage) GetEdgeSrc() *Endpoint {
	if m != nil {
		return m.EdgeSrc
	}
	return nil
}

func (m *AlertMessage) GetEdgeDst() *Endpoint {
	if m != nil {
		return m.EdgeDst
	}
	return nil
}

func (m *AlertMessage) GetEdgeStatus() EdgeStatus {
	if m != nil {
		return m.EdgeStatus
	}
	return UP
}

func (m *AlertMessage) GetConfigurationId() int64 {
	if m != nil {
		return m.ConfigurationId
	}
	return 0
}

func (m *AlertMessage) GetRingNumber() []int32 {
	if m != nil {
		return m.RingNumber
	}
	return nil
}

func (m *AlertMessage) GetNodeId() *NodeId {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *AlertMessage) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Response struct {
}

func (m *Response) Reset()      { *m = Response{} }
func (*Response) ProtoMessage() {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{9}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

type FastRoundPhase2BMessage struct {
	Sender          *Endpoint   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ConfigurationId int64       `protobuf:"varint,2,opt,name=configurationId,proto3" json:"configurationId,omitempty"`
	Endpoints       []*Endpoint `protobuf:"bytes,3,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (m *FastRoundPhase2BMessage) Reset()      { *m = FastRoundPhase2BMessage{} }
func (*FastRoundPhase2BMessage) ProtoMessage() {}
func (*FastRoundPhase2BMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{10}
}
func (m *FastRoundPhase2BMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FastRoundPhase2BMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FastRoundPhase2BMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FastRoundPhase2BMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FastRoundPhase2BMessage.Merge(m, src)
}
func (m *FastRoundPhase2BMessage) XXX_Size() int {
	return m.Size()
}
func (m *FastRoundPhase2BMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FastRoundPhase2BMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FastRoundPhase2BMessage proto.InternalMessageInfo

func (m *FastRoundPhase2BMessage) GetSender() *Endpoint {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *FastRoundPhase2BMessage) GetConfigurationId() int64 {
	if m != nil {
		return m.ConfigurationId
	}
	return 0
}

func (m *FastRoundPhase2BMessage) GetEndpoints() []*Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

// ******* Classic Paxos messages *********
type Rank struct {
	Round     int32 `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	NodeIndex int32 `protobuf:"varint,2,opt,name=nodeIndex,proto3" json:"nodeIndex,omitempty"`
}

func (m *Rank) Reset()      { *m = Rank{} }
func (*Rank) ProtoMessage() {}
func (*Rank) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{11}
}
func (m *Rank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rank.Merge(m, src)
}
func (m *Rank) XXX_Size() int {
	return m.Size()
}
func (m *Rank) XXX_DiscardUnknown() {
	xxx_messageInfo_Rank.DiscardUnknown(m)
}

var xxx_messageInfo_Rank proto.InternalMessageInfo

func (m *Rank) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Rank) GetNodeIndex() int32 {
	if m != nil {
		return m.NodeIndex
	}
	return 0
}

type Phase1AMessage struct {
	Sender          *Endpoint `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ConfigurationId int64     `protobuf:"varint,2,opt,name=configurationId,proto3" json:"configurationId,omitempty"`
	Rank            *Rank     `protobuf:"bytes,3,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (m *Phase1AMessage) Reset()      { *m = Phase1AMessage{} }
func (*Phase1AMessage) ProtoMessage() {}
func (*Phase1AMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{12}
}
func (m *Phase1AMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Phase1AMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Phase1AMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Phase1AMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Phase1AMessage.Merge(m, src)
}
func (m *Phase1AMessage) XXX_Size() int {
	return m.Size()
}
func (m *Phase1AMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_Phase1AMessage.DiscardUnknown(m)
}

var xxx_messageInfo_Phase1AMessage proto.InternalMessageInfo

func (m *Phase1AMessage) GetSender() *Endpoint {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Phase1AMessage) GetConfigurationId() int64 {
	if m != nil {
		return m.ConfigurationId
	}
	return 0
}

func (m *Phase1AMessage) GetRank() *Rank {
	if m != nil {
		return m.Rank
	}
	return nil
}

type Phase1BMessage struct {
	Sender          *Endpoint   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ConfigurationId int64       `protobuf:"varint,2,opt,name=configurationId,proto3" json:"configurationId,omitempty"`
	Rnd             *Rank       `protobuf:"bytes,3,opt,name=rnd,proto3" json:"rnd,omitempty"`
	Vrnd            *Rank       `protobuf:"bytes,4,opt,name=vrnd,proto3" json:"vrnd,omitempty"`
	Vval            []*Endpoint `protobuf:"bytes,5,rep,name=vval,proto3" json:"vval,omitempty"`
}

func (m *Phase1BMessage) Reset()      { *m = Phase1BMessage{} }
func (*Phase1BMessage) ProtoMessage() {}
func (*Phase1BMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{13}
}
func (m *Phase1BMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Phase1BMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Phase1BMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Phase1BMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Phase1BMessage.Merge(m, src)
}
func (m *Phase1BMessage) XXX_Size() int {
	return m.Size()
}
func (m *Phase1BMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_Phase1BMessage.DiscardUnknown(m)
}

var xxx_messageInfo_Phase1BMessage proto.InternalMessageInfo

func (m *Phase1BMessage) GetSender() *Endpoint {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Phase1BMessage) GetConfigurationId() int64 {
	if m != nil {
		return m.ConfigurationId
	}
	return 0
}

func (m *Phase1BMessage) GetRnd() *Rank {
	if m != nil {
		return m.Rnd
	}
	return nil
}

func (m *Phase1BMessage) GetVrnd() *Rank {
	if m != nil {
		return m.Vrnd
	}
	return nil
}

func (m *Phase1BMessage) GetVval() []*Endpoint {
	if m != nil {
		return m.Vval
	}
	return nil
}

type Phase2AMessage struct {
	Sender          *Endpoint   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ConfigurationId int64       `protobuf:"varint,2,opt,name=configurationId,proto3" json:"configurationId,omitempty"`
	Rnd             *Rank       `protobuf:"bytes,3,opt,name=rnd,proto3" json:"rnd,omitempty"`
	Vval            []*Endpoint `protobuf:"bytes,5,rep,name=vval,proto3" json:"vval,omitempty"`
}

func (m *Phase2AMessage) Reset()      { *m = Phase2AMessage{} }
func (*Phase2AMessage) ProtoMessage() {}
func (*Phase2AMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{14}
}
func (m *Phase2AMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Phase2AMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Phase2AMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Phase2AMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Phase2AMessage.Merge(m, src)
}
func (m *Phase2AMessage) XXX_Size() int {
	return m.Size()
}
func (m *Phase2AMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_Phase2AMessage.DiscardUnknown(m)
}

var xxx_messageInfo_Phase2AMessage proto.InternalMessageInfo

func (m *Phase2AMessage) GetSender() *Endpoint {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Phase2AMessage) GetConfigurationId() int64 {
	if m != nil {
		return m.ConfigurationId
	}
	return 0
}

func (m *Phase2AMessage) GetRnd() *Rank {
	if m != nil {
		return m.Rnd
	}
	return nil
}

func (m *Phase2AMessage) GetVval() []*Endpoint {
	if m != nil {
		return m.Vval
	}
	return nil
}

type Phase2BMessage struct {
	Sender          *Endpoint   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ConfigurationId int64       `protobuf:"varint,2,opt,name=configurationId,proto3" json:"configurationId,omitempty"`
	Rnd             *Rank       `protobuf:"bytes,3,opt,name=rnd,proto3" json:"rnd,omitempty"`
	Endpoints       []*Endpoint `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (m *Phase2BMessage) Reset()      { *m = Phase2BMessage{} }
func (*Phase2BMessage) ProtoMessage() {}
func (*Phase2BMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{15}
}
func (m *Phase2BMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Phase2BMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Phase2BMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Phase2BMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Phase2BMessage.Merge(m, src)
}
func (m *Phase2BMessage) XXX_Size() int {
	return m.Size()
}
func (m *Phase2BMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_Phase2BMessage.DiscardUnknown(m)
}

var xxx_messageInfo_Phase2BMessage proto.InternalMessageInfo

func (m *Phase2BMessage) GetSender() *Endpoint {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Phase2BMessage) GetConfigurationId() int64 {
	if m != nil {
		return m.ConfigurationId
	}
	return 0
}

func (m *Phase2BMessage) GetRnd() *Rank {
	if m != nil {
		return m.Rnd
	}
	return nil
}

func (m *Phase2BMessage) GetEndpoints() []*Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type ConsensusResponse struct {
}

func (m *ConsensusResponse) Reset()      { *m = ConsensusResponse{} }
func (*ConsensusResponse) ProtoMessage() {}
func (*ConsensusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{16}
}
func (m *ConsensusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusResponse.Merge(m, src)
}
func (m *ConsensusResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusResponse proto.InternalMessageInfo

// ******* Node Metadata *********
type Metadata struct {
	Metadata map[string][]byte `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Metadata) Reset()      { *m = Metadata{} }
func (*Metadata) ProtoMessage() {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{17}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetMetadata() map[string][]byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type ProbeMessage struct {
	Sender  *Endpoint `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Payload [][]byte  `protobuf:"bytes,3,rep,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ProbeMessage) Reset()      { *m = ProbeMessage{} }
func (*ProbeMessage) ProtoMessage() {}
func (*ProbeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{18}
}
func (m *ProbeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProbeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProbeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProbeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeMessage.Merge(m, src)
}
func (m *ProbeMessage) XXX_Size() int {
	return m.Size()
}
func (m *ProbeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeMessage proto.InternalMessageInfo

func (m *ProbeMessage) GetSender() *Endpoint {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *ProbeMessage) GetPayload() [][]byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ProbeResponse struct {
	Status NodeStatus `protobuf:"varint,1,opt,name=status,proto3,enum=remoting.NodeStatus" json:"status,omitempty"`
}

func (m *ProbeResponse) Reset()      { *m = ProbeResponse{} }
func (*ProbeResponse) ProtoMessage() {}
func (*ProbeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8258ab588e437ac0, []int{19}
}
func (m *ProbeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProbeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProbeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProbeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeResponse.Merge(m, src)
}
func (m *ProbeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProbeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeResponse proto.InternalMessageInfo

func (m *ProbeResponse) GetStatus() NodeStatus {
	if m != nil {
		return m.Status
	}
	return OK
}

func init() {
	proto.RegisterEnum("remoting.JoinStatusCode", JoinStatusCode_name, JoinStatusCode_value)
	proto.RegisterEnum("remoting.EdgeStatus", EdgeStatus_name, EdgeStatus_value)
	proto.RegisterEnum("remoting.NodeStatus", NodeStatus_name, NodeStatus_value)
	proto.RegisterType((*Endpoint)(nil), "remoting.Endpoint")
	proto.RegisterType((*RapidRequest)(nil), "remoting.RapidRequest")
	proto.RegisterType((*RapidResponse)(nil), "remoting.RapidResponse")
	proto.RegisterType((*NodeId)(nil), "remoting.NodeId")
	proto.RegisterType((*PreJoinMessage)(nil), "remoting.PreJoinMessage")
	proto.RegisterType((*JoinMessage)(nil), "remoting.JoinMessage")
	proto.RegisterType((*JoinResponse)(nil), "remoting.JoinResponse")
	proto.RegisterMapType((map[string]*Metadata)(nil), "remoting.JoinResponse.ClusterMetadataEntry")
	proto.RegisterType((*BatchedAlertMessage)(nil), "remoting.BatchedAlertMessage")
	proto.RegisterType((*AlertMessage)(nil), "remoting.AlertMessage")
	proto.RegisterType((*Response)(nil), "remoting.Response")
	proto.RegisterType((*FastRoundPhase2BMessage)(nil), "remoting.FastRoundPhase2bMessage")
	proto.RegisterType((*Rank)(nil), "remoting.Rank")
	proto.RegisterType((*Phase1AMessage)(nil), "remoting.Phase1aMessage")
	proto.RegisterType((*Phase1BMessage)(nil), "remoting.Phase1bMessage")
	proto.RegisterType((*Phase2AMessage)(nil), "remoting.Phase2aMessage")
	proto.RegisterType((*Phase2BMessage)(nil), "remoting.Phase2bMessage")
	proto.RegisterType((*ConsensusResponse)(nil), "remoting.ConsensusResponse")
	proto.RegisterType((*Metadata)(nil), "remoting.Metadata")
	proto.RegisterMapType((map[string][]byte)(nil), "remoting.Metadata.MetadataEntry")
	proto.RegisterType((*ProbeMessage)(nil), "remoting.ProbeMessage")
	proto.RegisterType((*ProbeResponse)(nil), "remoting.ProbeResponse")
}

func init() { proto.RegisterFile("rapid.proto", fileDescriptor_8258ab588e437ac0) }

var fileDescriptor_8258ab588e437ac0 = []byte{
	// 1300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x3f, 0x70, 0x1b, 0xc5,
	0x17, 0xbe, 0xd5, 0x49, 0xb2, 0xfc, 0x2c, 0x2b, 0xf2, 0xda, 0xbf, 0x58, 0xe3, 0x5f, 0xb8, 0x31,
	0x57, 0x80, 0xc7, 0x64, 0x44, 0x10, 0x14, 0x21, 0x84, 0x01, 0xc9, 0x52, 0x22, 0x25, 0x58, 0x12,
	0x2b, 0x19, 0x86, 0x82, 0xd1, 0x9c, 0x74, 0x1b, 0xe9, 0xb0, 0x7c, 0x27, 0xee, 0x4e, 0x82, 0x74,
	0x34, 0x0c, 0x33, 0x54, 0x94, 0x69, 0xe9, 0x28, 0x99, 0xa1, 0x61, 0xa8, 0x28, 0x28, 0x28, 0x53,
	0x50, 0xa4, 0x61, 0x26, 0x56, 0x1a, 0xca, 0x94, 0x94, 0xcc, 0xad, 0xee, 0xcf, 0x9e, 0xef, 0x4c,
	0xac, 0x22, 0x93, 0xa1, 0xbb, 0xdb, 0xf7, 0xbd, 0x6f, 0xbf, 0x7d, 0xf7, 0xfe, 0xec, 0xc1, 0x9a,
	0xa9, 0x4c, 0x34, 0xb5, 0x38, 0x31, 0x0d, 0xdb, 0xc0, 0x19, 0x93, 0x9e, 0x18, 0xb6, 0xa6, 0x0f,
	0x77, 0xb6, 0x86, 0xc6, 0xd0, 0x60, 0x8b, 0xaf, 0x3b, 0x4f, 0x0b, 0xbb, 0x7c, 0x03, 0x32, 0x35,
	0x5d, 0x9d, 0x18, 0x9a, 0x6e, 0xe3, 0x1d, 0xc8, 0x8c, 0x0c, 0xcb, 0xd6, 0x95, 0x13, 0x5a, 0x40,
	0xbb, 0x68, 0x6f, 0x95, 0xf8, 0xef, 0x18, 0x43, 0x72, 0x62, 0x98, 0x76, 0x21, 0xb1, 0x8b, 0xf6,
	0x52, 0x84, 0x3d, 0xcb, 0x0f, 0x52, 0x90, 0x25, 0xce, 0x5e, 0x84, 0x7e, 0x3e, 0xa5, 0x96, 0x8d,
	0x2b, 0x90, 0x9b, 0x98, 0xf4, 0x8e, 0xa1, 0xe9, 0x87, 0xd4, 0xb2, 0x94, 0xe1, 0x82, 0x66, 0xad,
	0x54, 0x28, 0x7a, 0x2a, 0x8a, 0xed, 0x90, 0xbd, 0x2e, 0x90, 0x33, 0x1e, 0xf8, 0x6d, 0x58, 0xfb,
	0x8c, 0x23, 0x48, 0x30, 0x82, 0xff, 0x05, 0x04, 0x61, 0x6f, 0x1e, 0x8b, 0x3f, 0x84, 0xcd, 0xbe,
	0x62, 0x0f, 0x46, 0x54, 0x2d, 0x8f, 0xa9, 0x69, 0x7b, 0x14, 0x22, 0xa3, 0x78, 0x29, 0xa0, 0xa8,
	0x44, 0x41, 0x75, 0x81, 0xc4, 0xf9, 0xe2, 0x9b, 0x90, 0x9d, 0x98, 0x46, 0x9f, 0x7a, 0x5c, 0x49,
	0xc6, 0x75, 0x99, 0x3f, 0x4f, 0x60, 0xad, 0x0b, 0x24, 0x84, 0xc6, 0x9f, 0xc2, 0xf6, 0x3d, 0xc5,
	0xb2, 0x89, 0x31, 0xd5, 0xd5, 0xf6, 0x48, 0xb1, 0x68, 0xa9, 0xef, 0x11, 0xa5, 0x18, 0xd1, 0xcb,
	0x01, 0xd1, 0xad, 0x78, 0x60, 0x5d, 0x20, 0xe7, 0x71, 0xb0, 0x70, 0x3b, 0x2b, 0x6f, 0x28, 0x1e,
	0x6b, 0x3a, 0x12, 0xee, 0x90, 0x9d, 0x85, 0x3b, 0xb4, 0x12, 0x70, 0xf8, 0xca, 0x56, 0xe2, 0x39,
	0xfa, 0x11, 0x8e, 0x88, 0x8e, 0x92, 0xaf, 0x23, 0x13, 0xcb, 0x51, 0x8a, 0xe8, 0x28, 0x45, 0x74,
	0x04, 0x11, 0x5a, 0x8d, 0xe7, 0x88, 0xe8, 0xf0, 0x57, 0x2a, 0xab, 0xb0, 0x32, 0x30, 0x74, 0x9b,
	0xea, 0xb6, 0xfc, 0x20, 0x01, 0xeb, 0x6e, 0x6a, 0x5a, 0x13, 0x43, 0xb7, 0xd8, 0x97, 0x74, 0x72,
	0xc5, 0x7b, 0x77, 0x33, 0xf3, 0x72, 0x38, 0xb1, 0x3c, 0xab, 0xf3, 0x25, 0x79, 0x34, 0xbe, 0x06,
	0x19, 0xd3, 0xf3, 0x5c, 0xa4, 0x24, 0x0e, 0x3c, 0x39, 0x2f, 0x1f, 0x85, 0xef, 0xc2, 0xc6, 0xc0,
	0x79, 0xd0, 0xad, 0xa9, 0xe5, 0x6f, 0xba, 0x48, 0xc5, 0xff, 0x07, 0xae, 0x07, 0x67, 0x21, 0x75,
	0x81, 0x44, 0xfd, 0xf0, 0x7b, 0xb0, 0xce, 0x12, 0xcb, 0x27, 0x5a, 0xe4, 0xe1, 0xf6, 0x99, 0x3c,
	0xe4, 0x48, 0xc2, 0x78, 0x3e, 0x34, 0x45, 0x48, 0x37, 0x0d, 0x95, 0x36, 0x54, 0xa7, 0xa6, 0x47,
	0xda, 0x70, 0xc4, 0x42, 0x21, 0x12, 0xf6, 0x8c, 0xf3, 0x20, 0x8e, 0x8d, 0x2f, 0xd8, 0x19, 0x45,
	0xe2, 0x3c, 0xca, 0x3f, 0x22, 0xc8, 0x85, 0xab, 0x16, 0xef, 0x43, 0xda, 0xa2, 0xba, 0x4a, 0x4d,
	0x37, 0x8a, 0x5c, 0x2c, 0xbc, 0x66, 0x42, 0x5c, 0x04, 0xde, 0x83, 0xb4, 0xce, 0xb6, 0x73, 0xe3,
	0x96, 0x0f, 0xb0, 0x0b, 0x19, 0xc4, 0xb5, 0x63, 0x09, 0xc0, 0xd4, 0xf4, 0x61, 0x73, 0x7a, 0xd2,
	0xa7, 0x66, 0x41, 0xdc, 0x15, 0xf7, 0x52, 0x84, 0x5b, 0xc1, 0x7b, 0x70, 0x69, 0x60, 0xe8, 0xf7,
	0xb4, 0xe1, 0xd4, 0x54, 0x6c, 0xcd, 0xd0, 0x1b, 0x2a, 0x0b, 0x83, 0x48, 0xce, 0x2e, 0xcb, 0x7f,
	0x22, 0x58, 0xfb, 0x0f, 0xe9, 0xc5, 0x45, 0xc8, 0x9c, 0x50, 0x5b, 0x51, 0x15, 0x5b, 0x71, 0x1b,
	0x03, 0xa7, 0xf0, 0xd0, 0xb5, 0x10, 0x1f, 0x23, 0xff, 0x24, 0x42, 0x96, 0x4f, 0xd7, 0xa5, 0x0e,
	0x78, 0x1d, 0xc0, 0xb2, 0x15, 0x7b, 0x6a, 0x1d, 0x18, 0xea, 0x22, 0x99, 0x73, 0x7c, 0x95, 0x39,
	0xbc, 0x1d, 0xdf, 0x4e, 0x38, 0x6c, 0xdc, 0x81, 0xc4, 0xf8, 0x03, 0x5d, 0x83, 0x55, 0xea, 0xee,
	0x6b, 0x15, 0x92, 0xbb, 0xe2, 0x39, 0x92, 0x02, 0x10, 0x2e, 0xc1, 0x9a, 0xa6, 0x52, 0xdd, 0xd6,
	0xee, 0x69, 0xd4, 0xb4, 0x0a, 0x29, 0xe6, 0x13, 0x8d, 0x3d, 0x0f, 0xc2, 0x47, 0x70, 0x69, 0x30,
	0x9e, 0x5a, 0x36, 0x35, 0xbd, 0x18, 0x15, 0xd2, 0xcc, 0xef, 0xb5, 0xf8, 0xaa, 0x2e, 0x1e, 0x84,
	0xd1, 0x35, 0xdd, 0x36, 0xef, 0x93, 0xb3, 0x1c, 0x3b, 0x1f, 0xc1, 0x56, 0x1c, 0xd0, 0x29, 0x8d,
	0x63, 0x7a, 0xdf, 0x9d, 0x8c, 0xce, 0x23, 0xde, 0x83, 0xd4, 0x4c, 0x19, 0x4f, 0x63, 0x5a, 0x82,
	0xff, 0xd1, 0x16, 0x80, 0x1b, 0x89, 0xeb, 0x48, 0x9e, 0xc2, 0x66, 0xcc, 0xe4, 0x59, 0xea, 0xdb,
	0x95, 0x9c, 0x44, 0x61, 0x6e, 0x16, 0x4b, 0xb8, 0x50, 0x03, 0xe3, 0x59, 0x89, 0x8f, 0x93, 0x7f,
	0x4b, 0x40, 0x36, 0xb4, 0xe1, 0x55, 0x58, 0xa1, 0xea, 0x90, 0x76, 0xcc, 0xc1, 0xbf, 0xec, 0xe8,
	0x41, 0x3c, 0x74, 0xd5, 0xb2, 0xa3, 0xa7, 0x0c, 0xa3, 0xab, 0x96, 0x8d, 0xdf, 0x02, 0x60, 0x8e,
	0x2c, 0x69, 0x58, 0x76, 0xe4, 0x4a, 0x5b, 0x9c, 0x83, 0x6f, 0x23, 0x1c, 0x6e, 0x89, 0x4a, 0x09,
	0xd7, 0x5c, 0x2a, 0xa6, 0xe6, 0xbc, 0xea, 0x4d, 0x3f, 0xa3, 0x7a, 0xf9, 0x9a, 0x5b, 0xb9, 0x40,
	0xcd, 0x01, 0x64, 0xbc, 0x3c, 0x92, 0xbf, 0x47, 0xb0, 0x7d, 0xce, 0xbc, 0x5e, 0xb2, 0xd7, 0x44,
	0xce, 0x9d, 0xb8, 0x40, 0x41, 0x89, 0x17, 0x28, 0x28, 0xf9, 0x06, 0x24, 0x89, 0xa2, 0x1f, 0xe3,
	0x2d, 0x48, 0x99, 0x8e, 0x4c, 0x26, 0x27, 0x45, 0x16, 0x2f, 0xf8, 0x0a, 0xac, 0xb2, 0x38, 0xe8,
	0x2a, 0xfd, 0xd2, 0xbd, 0xd3, 0x05, 0x0b, 0xf2, 0xb7, 0x4e, 0xcb, 0x0f, 0xdf, 0x13, 0x9e, 0xcf,
	0xb1, 0x64, 0x48, 0x9a, 0x8a, 0x7e, 0xec, 0xce, 0xc5, 0x1c, 0x37, 0x52, 0x15, 0xfd, 0x98, 0x30,
	0x9b, 0xfc, 0x87, 0x2f, 0xe6, 0x39, 0xc7, 0x78, 0x17, 0x44, 0x53, 0x57, 0xcf, 0xd1, 0xe2, 0x98,
	0x1c, 0xb9, 0x33, 0x07, 0x92, 0x8c, 0x97, 0xeb, 0xd8, 0xf0, 0x2b, 0x90, 0x9c, 0xcd, 0x94, 0xb1,
	0xdb, 0xc1, 0xe2, 0x94, 0x31, 0xfb, 0x62, 0xac, 0x86, 0xef, 0x40, 0x2f, 0xea, 0x58, 0x17, 0x95,
	0xfc, 0x8b, 0x2f, 0xf9, 0x85, 0x7f, 0x89, 0xa5, 0x07, 0x8c, 0xbc, 0x09, 0x1b, 0x91, 0xcb, 0x96,
	0xfc, 0x35, 0x82, 0x8c, 0x57, 0xeb, 0xf8, 0x26, 0xd7, 0x11, 0x10, 0xa3, 0xdc, 0x8d, 0x76, 0x84,
	0x62, 0x78, 0x78, 0xf8, 0x1e, 0x3b, 0xef, 0xc0, 0xfa, 0xb3, 0xc6, 0xc5, 0x16, 0x3f, 0x2e, 0xb2,
	0xfc, 0x68, 0xe8, 0x42, 0x96, 0xff, 0x91, 0x58, 0x2a, 0xac, 0x05, 0x58, 0x99, 0x28, 0xf7, 0xc7,
	0x86, 0xa2, 0xb2, 0xc6, 0x90, 0x25, 0xde, 0xab, 0xfc, 0x2e, 0xac, 0x87, 0xae, 0x85, 0xf8, 0x2a,
	0xa4, 0x17, 0xe3, 0x9c, 0xd1, 0x86, 0x3a, 0xb3, 0xd3, 0x1d, 0xdd, 0xce, 0xec, 0x62, 0xf6, 0xbf,
	0x41, 0x90, 0x0b, 0xdf, 0x06, 0xf0, 0x15, 0x28, 0xd4, 0x5b, 0x9d, 0x6e, 0xb3, 0x7c, 0x58, 0xeb,
	0x95, 0x3f, 0x20, 0xb5, 0x72, 0xf5, 0x93, 0x5e, 0xa3, 0xd9, 0x23, 0x8d, 0xe6, 0xed, 0xbc, 0x80,
	0x0b, 0xb0, 0x75, 0x74, 0xd4, 0xa8, 0x46, 0x2c, 0x08, 0xe7, 0x21, 0xdb, 0x29, 0xdf, 0xaa, 0xf5,
	0xba, 0xad, 0xde, 0x9d, 0x56, 0xa3, 0x99, 0x4f, 0x60, 0x0c, 0xb9, 0x83, 0x56, 0xf3, 0x56, 0xe3,
	0x76, 0xef, 0xa0, 0x5e, 0x6e, 0xde, 0xae, 0x55, 0xf3, 0x22, 0xde, 0x86, 0xcd, 0xc3, 0xda, 0x61,
	0xa5, 0x46, 0x3a, 0xf5, 0x46, 0xbb, 0x47, 0x6a, 0x77, 0x6a, 0x07, 0xdd, 0x5a, 0x35, 0x9f, 0xdc,
	0x97, 0x00, 0x82, 0xc9, 0x81, 0xd3, 0x90, 0x38, 0x6a, 0xe7, 0x05, 0x9c, 0x81, 0x64, 0xb5, 0xf5,
	0x71, 0x33, 0x8f, 0xf6, 0x5f, 0x05, 0x08, 0xf4, 0x3b, 0xf6, 0xd6, 0xdd, 0xbc, 0x80, 0x37, 0x60,
	0xbd, 0xd2, 0x6a, 0x75, 0x3b, 0x5d, 0x52, 0x6e, 0xb7, 0x99, 0x8e, 0xd2, 0x11, 0x6c, 0x1c, 0x52,
	0x67, 0x50, 0x58, 0x23, 0x6d, 0xd2, 0xa1, 0xe6, 0x4c, 0x1b, 0x50, 0xfc, 0x3e, 0xac, 0x39, 0xa1,
	0xf4, 0x7e, 0x62, 0x2f, 0xf3, 0xf9, 0x16, 0xfc, 0xdc, 0xee, 0x6c, 0x47, 0xd6, 0xdd, 0x24, 0x12,
	0x2a, 0xfd, 0x87, 0xa7, 0x92, 0xf0, 0xe8, 0x54, 0x12, 0x1e, 0x9f, 0x4a, 0xe8, 0xe9, 0xa9, 0x84,
	0xfe, 0x3e, 0x95, 0xd0, 0x57, 0x73, 0x09, 0xfd, 0x30, 0x97, 0xd0, 0xcf, 0x73, 0x09, 0xfd, 0x3a,
	0x97, 0xd0, 0xef, 0x73, 0x09, 0x3d, 0x9c, 0x4b, 0xe8, 0xf1, 0x5c, 0x42, 0x7f, 0xcd, 0x25, 0xe1,
	0xe9, 0x5c, 0x42, 0xdf, 0x3d, 0x91, 0x84, 0x87, 0x4f, 0x24, 0xe1, 0xd1, 0x13, 0x49, 0x80, 0xfc,
	0xc0, 0x38, 0x29, 0xce, 0xcc, 0x61, 0xd1, 0xfd, 0x7f, 0xef, 0x57, 0x32, 0xc4, 0xdd, 0xb1, 0x8d,
	0xfa, 0x69, 0xf6, 0xbf, 0xfe, 0xe6, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xe7, 0x72, 0x67,
	0xde, 0x0f, 0x00, 0x00,
}

func (x JoinStatusCode) String() string {
	s, ok := JoinStatusCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EdgeStatus) String() string {
	s, ok := EdgeStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NodeStatus) String() string {
	s, ok := NodeStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Endpoint) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Endpoint)
	if !ok {
		that2, ok := that.(Endpoint)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Endpoint")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Endpoint but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Endpoint but is not nil && this == nil")
	}
	if this.Hostname != that1.Hostname {
		return fmt.Errorf("Hostname this(%v) Not Equal that(%v)", this.Hostname, that1.Hostname)
	}
	if this.Port != that1.Port {
		return fmt.Errorf("Port this(%v) Not Equal that(%v)", this.Port, that1.Port)
	}
	return nil
}
func (this *Endpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Endpoint)
	if !ok {
		that2, ok := that.(Endpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *RapidRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RapidRequest)
	if !ok {
		that2, ok := that.(RapidRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RapidRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RapidRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RapidRequest but is not nil && this == nil")
	}
	if that1.Content == nil {
		if this.Content != nil {
			return fmt.Errorf("this.Content != nil && that1.Content == nil")
		}
	} else if this.Content == nil {
		return fmt.Errorf("this.Content == nil && that1.Content != nil")
	} else if err := this.Content.VerboseEqual(that1.Content); err != nil {
		return err
	}
	return nil
}
func (this *RapidRequest_PreJoinMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RapidRequest_PreJoinMessage)
	if !ok {
		that2, ok := that.(RapidRequest_PreJoinMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RapidRequest_PreJoinMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RapidRequest_PreJoinMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RapidRequest_PreJoinMessage but is not nil && this == nil")
	}
	if !this.PreJoinMessage.Equal(that1.PreJoinMessage) {
		return fmt.Errorf("PreJoinMessage this(%v) Not Equal that(%v)", this.PreJoinMessage, that1.PreJoinMessage)
	}
	return nil
}
func (this *RapidRequest_JoinMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RapidRequest_JoinMessage)
	if !ok {
		that2, ok := that.(RapidRequest_JoinMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RapidRequest_JoinMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RapidRequest_JoinMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RapidRequest_JoinMessage but is not nil && this == nil")
	}
	if !this.JoinMessage.Equal(that1.JoinMessage) {
		return fmt.Errorf("JoinMessage this(%v) Not Equal that(%v)", this.JoinMessage, that1.JoinMessage)
	}
	return nil
}
func (this *RapidRequest_BatchedAlertMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RapidRequest_BatchedAlertMessage)
	if !ok {
		that2, ok := that.(RapidRequest_BatchedAlertMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RapidRequest_BatchedAlertMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RapidRequest_BatchedAlertMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RapidRequest_BatchedAlertMessage but is not nil && this == nil")
	}
	if !this.BatchedAlertMessage.Equal(that1.BatchedAlertMessage) {
		return fmt.Errorf("BatchedAlertMessage this(%v) Not Equal that(%v)", this.BatchedAlertMessage, that1.BatchedAlertMessage)
	}
	return nil
}
func (this *RapidRequest_ProbeMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RapidRequest_ProbeMessage)
	if !ok {
		that2, ok := that.(RapidRequest_ProbeMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RapidRequest_ProbeMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RapidRequest_ProbeMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RapidRequest_ProbeMessage but is not nil && this == nil")
	}
	if !this.ProbeMessage.Equal(that1.ProbeMessage) {
		return fmt.Errorf("ProbeMessage this(%v) Not Equal that(%v)", this.ProbeMessage, that1.ProbeMessage)
	}
	return nil
}
func (this *RapidRequest_FastRoundPhase2BMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RapidRequest_FastRoundPhase2BMessage)
	if !ok {
		that2, ok := that.(RapidRequest_FastRoundPhase2BMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RapidRequest_FastRoundPhase2BMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RapidRequest_FastRoundPhase2BMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RapidRequest_FastRoundPhase2BMessage but is not nil && this == nil")
	}
	if !this.FastRoundPhase2BMessage.Equal(that1.FastRoundPhase2BMessage) {
		return fmt.Errorf("FastRoundPhase2BMessage this(%v) Not Equal that(%v)", this.FastRoundPhase2BMessage, that1.FastRoundPhase2BMessage)
	}
	return nil
}
func (this *RapidRequest_Phase1AMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RapidRequest_Phase1AMessage)
	if !ok {
		that2, ok := that.(RapidRequest_Phase1AMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RapidRequest_Phase1AMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RapidRequest_Phase1AMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RapidRequest_Phase1AMessage but is not nil && this == nil")
	}
	if !this.Phase1AMessage.Equal(that1.Phase1AMessage) {
		return fmt.Errorf("Phase1AMessage this(%v) Not Equal that(%v)", this.Phase1AMessage, that1.Phase1AMessage)
	}
	return nil
}
func (this *RapidRequest_Phase1BMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RapidRequest_Phase1BMessage)
	if !ok {
		that2, ok := that.(RapidRequest_Phase1BMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RapidRequest_Phase1BMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RapidRequest_Phase1BMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RapidRequest_Phase1BMessage but is not nil && this == nil")
	}
	if !this.Phase1BMessage.Equal(that1.Phase1BMessage) {
		return fmt.Errorf("Phase1BMessage this(%v) Not Equal that(%v)", this.Phase1BMessage, that1.Phase1BMessage)
	}
	return nil
}
func (this *RapidRequest_Phase2AMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RapidRequest_Phase2AMessage)
	if !ok {
		that2, ok := that.(RapidRequest_Phase2AMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RapidRequest_Phase2AMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RapidRequest_Phase2AMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RapidRequest_Phase2AMessage but is not nil && this == nil")
	}
	if !this.Phase2AMessage.Equal(that1.Phase2AMessage) {
		return fmt.Errorf("Phase2AMessage this(%v) Not Equal that(%v)", this.Phase2AMessage, that1.Phase2AMessage)
	}
	return nil
}
func (this *RapidRequest_Phase2BMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RapidRequest_Phase2BMessage)
	if !ok {
		that2, ok := that.(RapidRequest_Phase2BMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RapidRequest_Phase2BMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RapidRequest_Phase2BMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RapidRequest_Phase2BMessage but is not nil && this == nil")
	}
	if !this.Phase2BMessage.Equal(that1.Phase2BMessage) {
		return fmt.Errorf("Phase2BMessage this(%v) Not Equal that(%v)", this.Phase2BMessage, that1.Phase2BMessage)
	}
	return nil
}
func (this *RapidRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RapidRequest)
	if !ok {
		that2, ok := that.(RapidRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Content == nil {
		if this.Content != nil {
			return false
		}
	} else if this.Content == nil {
		return false
	} else if !this.Content.Equal(that1.Content) {
		return false
	}
	return true
}
func (this *RapidRequest_PreJoinMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RapidRequest_PreJoinMessage)
	if !ok {
		that2, ok := that.(RapidRequest_PreJoinMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PreJoinMessage.Equal(that1.PreJoinMessage) {
		return false
	}
	return true
}
func (this *RapidRequest_JoinMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RapidRequest_JoinMessage)
	if !ok {
		that2, ok := that.(RapidRequest_JoinMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinMessage.Equal(that1.JoinMessage) {
		return false
	}
	return true
}
func (this *RapidRequest_BatchedAlertMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RapidRequest_BatchedAlertMessage)
	if !ok {
		that2, ok := that.(RapidRequest_BatchedAlertMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BatchedAlertMessage.Equal(that1.BatchedAlertMessage) {
		return false
	}
	return true
}
func (this *RapidRequest_ProbeMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RapidRequest_ProbeMessage)
	if !ok {
		that2, ok := that.(RapidRequest_ProbeMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProbeMessage.Equal(that1.ProbeMessage) {
		return false
	}
	return true
}
func (this *RapidRequest_FastRoundPhase2BMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RapidRequest_FastRoundPhase2BMessage)
	if !ok {
		that2, ok := that.(RapidRequest_FastRoundPhase2BMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FastRoundPhase2BMessage.Equal(that1.FastRoundPhase2BMessage) {
		return false
	}
	return true
}
func (this *RapidRequest_Phase1AMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RapidRequest_Phase1AMessage)
	if !ok {
		that2, ok := that.(RapidRequest_Phase1AMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Phase1AMessage.Equal(that1.Phase1AMessage) {
		return false
	}
	return true
}
func (this *RapidRequest_Phase1BMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RapidRequest_Phase1BMessage)
	if !ok {
		that2, ok := that.(RapidRequest_Phase1BMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Phase1BMessage.Equal(that1.Phase1BMessage) {
		return false
	}
	return true
}
func (this *RapidRequest_Phase2AMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RapidRequest_Phase2AMessage)
	if !ok {
		that2, ok := that.(RapidRequest_Phase2AMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Phase2AMessage.Equal(that1.Phase2AMessage) {
		return false
	}
	return true
}
func (this *RapidRequest_Phase2BMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RapidRequest_Phase2BMessage)
	if !ok {
		that2, ok := that.(RapidRequest_Phase2BMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Phase2BMessage.Equal(that1.Phase2BMessage) {
		return false
	}
	return true
}
func (this *RapidResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RapidResponse)
	if !ok {
		that2, ok := that.(RapidResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RapidResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RapidResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RapidResponse but is not nil && this == nil")
	}
	if that1.Content == nil {
		if this.Content != nil {
			return fmt.Errorf("this.Content != nil && that1.Content == nil")
		}
	} else if this.Content == nil {
		return fmt.Errorf("this.Content == nil && that1.Content != nil")
	} else if err := this.Content.VerboseEqual(that1.Content); err != nil {
		return err
	}
	return nil
}
func (this *RapidResponse_JoinResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RapidResponse_JoinResponse)
	if !ok {
		that2, ok := that.(RapidResponse_JoinResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RapidResponse_JoinResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RapidResponse_JoinResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RapidResponse_JoinResponse but is not nil && this == nil")
	}
	if !this.JoinResponse.Equal(that1.JoinResponse) {
		return fmt.Errorf("JoinResponse this(%v) Not Equal that(%v)", this.JoinResponse, that1.JoinResponse)
	}
	return nil
}
func (this *RapidResponse_Response) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RapidResponse_Response)
	if !ok {
		that2, ok := that.(RapidResponse_Response)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RapidResponse_Response")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RapidResponse_Response but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RapidResponse_Response but is not nil && this == nil")
	}
	if !this.Response.Equal(that1.Response) {
		return fmt.Errorf("Response this(%v) Not Equal that(%v)", this.Response, that1.Response)
	}
	return nil
}
func (this *RapidResponse_ConsensusResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RapidResponse_ConsensusResponse)
	if !ok {
		that2, ok := that.(RapidResponse_ConsensusResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RapidResponse_ConsensusResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RapidResponse_ConsensusResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RapidResponse_ConsensusResponse but is not nil && this == nil")
	}
	if !this.ConsensusResponse.Equal(that1.ConsensusResponse) {
		return fmt.Errorf("ConsensusResponse this(%v) Not Equal that(%v)", this.ConsensusResponse, that1.ConsensusResponse)
	}
	return nil
}
func (this *RapidResponse_ProbeResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RapidResponse_ProbeResponse)
	if !ok {
		that2, ok := that.(RapidResponse_ProbeResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RapidResponse_ProbeResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RapidResponse_ProbeResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RapidResponse_ProbeResponse but is not nil && this == nil")
	}
	if !this.ProbeResponse.Equal(that1.ProbeResponse) {
		return fmt.Errorf("ProbeResponse this(%v) Not Equal that(%v)", this.ProbeResponse, that1.ProbeResponse)
	}
	return nil
}
func (this *RapidResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RapidResponse)
	if !ok {
		that2, ok := that.(RapidResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Content == nil {
		if this.Content != nil {
			return false
		}
	} else if this.Content == nil {
		return false
	} else if !this.Content.Equal(that1.Content) {
		return false
	}
	return true
}
func (this *RapidResponse_JoinResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RapidResponse_JoinResponse)
	if !ok {
		that2, ok := that.(RapidResponse_JoinResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinResponse.Equal(that1.JoinResponse) {
		return false
	}
	return true
}
func (this *RapidResponse_Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RapidResponse_Response)
	if !ok {
		that2, ok := that.(RapidResponse_Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *RapidResponse_ConsensusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RapidResponse_ConsensusResponse)
	if !ok {
		that2, ok := that.(RapidResponse_ConsensusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConsensusResponse.Equal(that1.ConsensusResponse) {
		return false
	}
	return true
}
func (this *RapidResponse_ProbeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RapidResponse_ProbeResponse)
	if !ok {
		that2, ok := that.(RapidResponse_ProbeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProbeResponse.Equal(that1.ProbeResponse) {
		return false
	}
	return true
}
func (this *NodeId) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NodeId)
	if !ok {
		that2, ok := that.(NodeId)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NodeId")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NodeId but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NodeId but is not nil && this == nil")
	}
	if this.High != that1.High {
		return fmt.Errorf("High this(%v) Not Equal that(%v)", this.High, that1.High)
	}
	if this.Low != that1.Low {
		return fmt.Errorf("Low this(%v) Not Equal that(%v)", this.Low, that1.Low)
	}
	return nil
}
func (this *NodeId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeId)
	if !ok {
		that2, ok := that.(NodeId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.High != that1.High {
		return false
	}
	if this.Low != that1.Low {
		return false
	}
	return true
}
func (this *PreJoinMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PreJoinMessage)
	if !ok {
		that2, ok := that.(PreJoinMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PreJoinMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PreJoinMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PreJoinMessage but is not nil && this == nil")
	}
	if !this.Sender.Equal(that1.Sender) {
		return fmt.Errorf("Sender this(%v) Not Equal that(%v)", this.Sender, that1.Sender)
	}
	if !this.NodeId.Equal(that1.NodeId) {
		return fmt.Errorf("NodeId this(%v) Not Equal that(%v)", this.NodeId, that1.NodeId)
	}
	if len(this.RingNumber) != len(that1.RingNumber) {
		return fmt.Errorf("RingNumber this(%v) Not Equal that(%v)", len(this.RingNumber), len(that1.RingNumber))
	}
	for i := range this.RingNumber {
		if this.RingNumber[i] != that1.RingNumber[i] {
			return fmt.Errorf("RingNumber this[%v](%v) Not Equal that[%v](%v)", i, this.RingNumber[i], i, that1.RingNumber[i])
		}
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return fmt.Errorf("ConfigurationId this(%v) Not Equal that(%v)", this.ConfigurationId, that1.ConfigurationId)
	}
	return nil
}
func (this *PreJoinMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PreJoinMessage)
	if !ok {
		that2, ok := that.(PreJoinMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if !this.NodeId.Equal(that1.NodeId) {
		return false
	}
	if len(this.RingNumber) != len(that1.RingNumber) {
		return false
	}
	for i := range this.RingNumber {
		if this.RingNumber[i] != that1.RingNumber[i] {
			return false
		}
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return false
	}
	return true
}
func (this *JoinMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*JoinMessage)
	if !ok {
		that2, ok := that.(JoinMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *JoinMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *JoinMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *JoinMessage but is not nil && this == nil")
	}
	if !this.Sender.Equal(that1.Sender) {
		return fmt.Errorf("Sender this(%v) Not Equal that(%v)", this.Sender, that1.Sender)
	}
	if !this.NodeId.Equal(that1.NodeId) {
		return fmt.Errorf("NodeId this(%v) Not Equal that(%v)", this.NodeId, that1.NodeId)
	}
	if len(this.RingNumber) != len(that1.RingNumber) {
		return fmt.Errorf("RingNumber this(%v) Not Equal that(%v)", len(this.RingNumber), len(that1.RingNumber))
	}
	for i := range this.RingNumber {
		if this.RingNumber[i] != that1.RingNumber[i] {
			return fmt.Errorf("RingNumber this[%v](%v) Not Equal that[%v](%v)", i, this.RingNumber[i], i, that1.RingNumber[i])
		}
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return fmt.Errorf("ConfigurationId this(%v) Not Equal that(%v)", this.ConfigurationId, that1.ConfigurationId)
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", this.Metadata, that1.Metadata)
	}
	return nil
}
func (this *JoinMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinMessage)
	if !ok {
		that2, ok := that.(JoinMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if !this.NodeId.Equal(that1.NodeId) {
		return false
	}
	if len(this.RingNumber) != len(that1.RingNumber) {
		return false
	}
	for i := range this.RingNumber {
		if this.RingNumber[i] != that1.RingNumber[i] {
			return false
		}
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *JoinResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*JoinResponse)
	if !ok {
		that2, ok := that.(JoinResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *JoinResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *JoinResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *JoinResponse but is not nil && this == nil")
	}
	if !this.Sender.Equal(that1.Sender) {
		return fmt.Errorf("Sender this(%v) Not Equal that(%v)", this.Sender, that1.Sender)
	}
	if this.StatusCode != that1.StatusCode {
		return fmt.Errorf("StatusCode this(%v) Not Equal that(%v)", this.StatusCode, that1.StatusCode)
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return fmt.Errorf("ConfigurationId this(%v) Not Equal that(%v)", this.ConfigurationId, that1.ConfigurationId)
	}
	if len(this.Endpoints) != len(that1.Endpoints) {
		return fmt.Errorf("Endpoints this(%v) Not Equal that(%v)", len(this.Endpoints), len(that1.Endpoints))
	}
	for i := range this.Endpoints {
		if !this.Endpoints[i].Equal(that1.Endpoints[i]) {
			return fmt.Errorf("Endpoints this[%v](%v) Not Equal that[%v](%v)", i, this.Endpoints[i], i, that1.Endpoints[i])
		}
	}
	if len(this.Identifiers) != len(that1.Identifiers) {
		return fmt.Errorf("Identifiers this(%v) Not Equal that(%v)", len(this.Identifiers), len(that1.Identifiers))
	}
	for i := range this.Identifiers {
		if !this.Identifiers[i].Equal(that1.Identifiers[i]) {
			return fmt.Errorf("Identifiers this[%v](%v) Not Equal that[%v](%v)", i, this.Identifiers[i], i, that1.Identifiers[i])
		}
	}
	if len(this.ClusterMetadata) != len(that1.ClusterMetadata) {
		return fmt.Errorf("ClusterMetadata this(%v) Not Equal that(%v)", len(this.ClusterMetadata), len(that1.ClusterMetadata))
	}
	for i := range this.ClusterMetadata {
		if !this.ClusterMetadata[i].Equal(that1.ClusterMetadata[i]) {
			return fmt.Errorf("ClusterMetadata this[%v](%v) Not Equal that[%v](%v)", i, this.ClusterMetadata[i], i, that1.ClusterMetadata[i])
		}
	}
	return nil
}
func (this *JoinResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinResponse)
	if !ok {
		that2, ok := that.(JoinResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.StatusCode != that1.StatusCode {
		return false
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return false
	}
	if len(this.Endpoints) != len(that1.Endpoints) {
		return false
	}
	for i := range this.Endpoints {
		if !this.Endpoints[i].Equal(that1.Endpoints[i]) {
			return false
		}
	}
	if len(this.Identifiers) != len(that1.Identifiers) {
		return false
	}
	for i := range this.Identifiers {
		if !this.Identifiers[i].Equal(that1.Identifiers[i]) {
			return false
		}
	}
	if len(this.ClusterMetadata) != len(that1.ClusterMetadata) {
		return false
	}
	for i := range this.ClusterMetadata {
		if !this.ClusterMetadata[i].Equal(that1.ClusterMetadata[i]) {
			return false
		}
	}
	return true
}
func (this *BatchedAlertMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BatchedAlertMessage)
	if !ok {
		that2, ok := that.(BatchedAlertMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BatchedAlertMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BatchedAlertMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BatchedAlertMessage but is not nil && this == nil")
	}
	if !this.Sender.Equal(that1.Sender) {
		return fmt.Errorf("Sender this(%v) Not Equal that(%v)", this.Sender, that1.Sender)
	}
	if len(this.Messages) != len(that1.Messages) {
		return fmt.Errorf("Messages this(%v) Not Equal that(%v)", len(this.Messages), len(that1.Messages))
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return fmt.Errorf("Messages this[%v](%v) Not Equal that[%v](%v)", i, this.Messages[i], i, that1.Messages[i])
		}
	}
	return nil
}
func (this *BatchedAlertMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BatchedAlertMessage)
	if !ok {
		that2, ok := that.(BatchedAlertMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	return true
}
func (this *AlertMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AlertMessage)
	if !ok {
		that2, ok := that.(AlertMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AlertMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AlertMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AlertMessage but is not nil && this == nil")
	}
	if !this.EdgeSrc.Equal(that1.EdgeSrc) {
		return fmt.Errorf("EdgeSrc this(%v) Not Equal that(%v)", this.EdgeSrc, that1.EdgeSrc)
	}
	if !this.EdgeDst.Equal(that1.EdgeDst) {
		return fmt.Errorf("EdgeDst this(%v) Not Equal that(%v)", this.EdgeDst, that1.EdgeDst)
	}
	if this.EdgeStatus != that1.EdgeStatus {
		return fmt.Errorf("EdgeStatus this(%v) Not Equal that(%v)", this.EdgeStatus, that1.EdgeStatus)
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return fmt.Errorf("ConfigurationId this(%v) Not Equal that(%v)", this.ConfigurationId, that1.ConfigurationId)
	}
	if len(this.RingNumber) != len(that1.RingNumber) {
		return fmt.Errorf("RingNumber this(%v) Not Equal that(%v)", len(this.RingNumber), len(that1.RingNumber))
	}
	for i := range this.RingNumber {
		if this.RingNumber[i] != that1.RingNumber[i] {
			return fmt.Errorf("RingNumber this[%v](%v) Not Equal that[%v](%v)", i, this.RingNumber[i], i, that1.RingNumber[i])
		}
	}
	if !this.NodeId.Equal(that1.NodeId) {
		return fmt.Errorf("NodeId this(%v) Not Equal that(%v)", this.NodeId, that1.NodeId)
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", this.Metadata, that1.Metadata)
	}
	return nil
}
func (this *AlertMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AlertMessage)
	if !ok {
		that2, ok := that.(AlertMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EdgeSrc.Equal(that1.EdgeSrc) {
		return false
	}
	if !this.EdgeDst.Equal(that1.EdgeDst) {
		return false
	}
	if this.EdgeStatus != that1.EdgeStatus {
		return false
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return false
	}
	if len(this.RingNumber) != len(that1.RingNumber) {
		return false
	}
	for i := range this.RingNumber {
		if this.RingNumber[i] != that1.RingNumber[i] {
			return false
		}
	}
	if !this.NodeId.Equal(that1.NodeId) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *Response) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Response")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Response but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Response but is not nil && this == nil")
	}
	return nil
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *FastRoundPhase2BMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FastRoundPhase2BMessage)
	if !ok {
		that2, ok := that.(FastRoundPhase2BMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FastRoundPhase2BMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FastRoundPhase2BMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FastRoundPhase2BMessage but is not nil && this == nil")
	}
	if !this.Sender.Equal(that1.Sender) {
		return fmt.Errorf("Sender this(%v) Not Equal that(%v)", this.Sender, that1.Sender)
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return fmt.Errorf("ConfigurationId this(%v) Not Equal that(%v)", this.ConfigurationId, that1.ConfigurationId)
	}
	if len(this.Endpoints) != len(that1.Endpoints) {
		return fmt.Errorf("Endpoints this(%v) Not Equal that(%v)", len(this.Endpoints), len(that1.Endpoints))
	}
	for i := range this.Endpoints {
		if !this.Endpoints[i].Equal(that1.Endpoints[i]) {
			return fmt.Errorf("Endpoints this[%v](%v) Not Equal that[%v](%v)", i, this.Endpoints[i], i, that1.Endpoints[i])
		}
	}
	return nil
}
func (this *FastRoundPhase2BMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FastRoundPhase2BMessage)
	if !ok {
		that2, ok := that.(FastRoundPhase2BMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return false
	}
	if len(this.Endpoints) != len(that1.Endpoints) {
		return false
	}
	for i := range this.Endpoints {
		if !this.Endpoints[i].Equal(that1.Endpoints[i]) {
			return false
		}
	}
	return true
}
func (this *Rank) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Rank)
	if !ok {
		that2, ok := that.(Rank)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Rank")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Rank but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Rank but is not nil && this == nil")
	}
	if this.Round != that1.Round {
		return fmt.Errorf("Round this(%v) Not Equal that(%v)", this.Round, that1.Round)
	}
	if this.NodeIndex != that1.NodeIndex {
		return fmt.Errorf("NodeIndex this(%v) Not Equal that(%v)", this.NodeIndex, that1.NodeIndex)
	}
	return nil
}
func (this *Rank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Rank)
	if !ok {
		that2, ok := that.(Rank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.NodeIndex != that1.NodeIndex {
		return false
	}
	return true
}
func (this *Phase1AMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Phase1AMessage)
	if !ok {
		that2, ok := that.(Phase1AMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Phase1AMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Phase1AMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Phase1AMessage but is not nil && this == nil")
	}
	if !this.Sender.Equal(that1.Sender) {
		return fmt.Errorf("Sender this(%v) Not Equal that(%v)", this.Sender, that1.Sender)
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return fmt.Errorf("ConfigurationId this(%v) Not Equal that(%v)", this.ConfigurationId, that1.ConfigurationId)
	}
	if !this.Rank.Equal(that1.Rank) {
		return fmt.Errorf("Rank this(%v) Not Equal that(%v)", this.Rank, that1.Rank)
	}
	return nil
}
func (this *Phase1AMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Phase1AMessage)
	if !ok {
		that2, ok := that.(Phase1AMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return false
	}
	if !this.Rank.Equal(that1.Rank) {
		return false
	}
	return true
}
func (this *Phase1BMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Phase1BMessage)
	if !ok {
		that2, ok := that.(Phase1BMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Phase1BMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Phase1BMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Phase1BMessage but is not nil && this == nil")
	}
	if !this.Sender.Equal(that1.Sender) {
		return fmt.Errorf("Sender this(%v) Not Equal that(%v)", this.Sender, that1.Sender)
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return fmt.Errorf("ConfigurationId this(%v) Not Equal that(%v)", this.ConfigurationId, that1.ConfigurationId)
	}
	if !this.Rnd.Equal(that1.Rnd) {
		return fmt.Errorf("Rnd this(%v) Not Equal that(%v)", this.Rnd, that1.Rnd)
	}
	if !this.Vrnd.Equal(that1.Vrnd) {
		return fmt.Errorf("Vrnd this(%v) Not Equal that(%v)", this.Vrnd, that1.Vrnd)
	}
	if len(this.Vval) != len(that1.Vval) {
		return fmt.Errorf("Vval this(%v) Not Equal that(%v)", len(this.Vval), len(that1.Vval))
	}
	for i := range this.Vval {
		if !this.Vval[i].Equal(that1.Vval[i]) {
			return fmt.Errorf("Vval this[%v](%v) Not Equal that[%v](%v)", i, this.Vval[i], i, that1.Vval[i])
		}
	}
	return nil
}
func (this *Phase1BMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Phase1BMessage)
	if !ok {
		that2, ok := that.(Phase1BMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return false
	}
	if !this.Rnd.Equal(that1.Rnd) {
		return false
	}
	if !this.Vrnd.Equal(that1.Vrnd) {
		return false
	}
	if len(this.Vval) != len(that1.Vval) {
		return false
	}
	for i := range this.Vval {
		if !this.Vval[i].Equal(that1.Vval[i]) {
			return false
		}
	}
	return true
}
func (this *Phase2AMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Phase2AMessage)
	if !ok {
		that2, ok := that.(Phase2AMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Phase2AMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Phase2AMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Phase2AMessage but is not nil && this == nil")
	}
	if !this.Sender.Equal(that1.Sender) {
		return fmt.Errorf("Sender this(%v) Not Equal that(%v)", this.Sender, that1.Sender)
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return fmt.Errorf("ConfigurationId this(%v) Not Equal that(%v)", this.ConfigurationId, that1.ConfigurationId)
	}
	if !this.Rnd.Equal(that1.Rnd) {
		return fmt.Errorf("Rnd this(%v) Not Equal that(%v)", this.Rnd, that1.Rnd)
	}
	if len(this.Vval) != len(that1.Vval) {
		return fmt.Errorf("Vval this(%v) Not Equal that(%v)", len(this.Vval), len(that1.Vval))
	}
	for i := range this.Vval {
		if !this.Vval[i].Equal(that1.Vval[i]) {
			return fmt.Errorf("Vval this[%v](%v) Not Equal that[%v](%v)", i, this.Vval[i], i, that1.Vval[i])
		}
	}
	return nil
}
func (this *Phase2AMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Phase2AMessage)
	if !ok {
		that2, ok := that.(Phase2AMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return false
	}
	if !this.Rnd.Equal(that1.Rnd) {
		return false
	}
	if len(this.Vval) != len(that1.Vval) {
		return false
	}
	for i := range this.Vval {
		if !this.Vval[i].Equal(that1.Vval[i]) {
			return false
		}
	}
	return true
}
func (this *Phase2BMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Phase2BMessage)
	if !ok {
		that2, ok := that.(Phase2BMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Phase2BMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Phase2BMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Phase2BMessage but is not nil && this == nil")
	}
	if !this.Sender.Equal(that1.Sender) {
		return fmt.Errorf("Sender this(%v) Not Equal that(%v)", this.Sender, that1.Sender)
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return fmt.Errorf("ConfigurationId this(%v) Not Equal that(%v)", this.ConfigurationId, that1.ConfigurationId)
	}
	if !this.Rnd.Equal(that1.Rnd) {
		return fmt.Errorf("Rnd this(%v) Not Equal that(%v)", this.Rnd, that1.Rnd)
	}
	if len(this.Endpoints) != len(that1.Endpoints) {
		return fmt.Errorf("Endpoints this(%v) Not Equal that(%v)", len(this.Endpoints), len(that1.Endpoints))
	}
	for i := range this.Endpoints {
		if !this.Endpoints[i].Equal(that1.Endpoints[i]) {
			return fmt.Errorf("Endpoints this[%v](%v) Not Equal that[%v](%v)", i, this.Endpoints[i], i, that1.Endpoints[i])
		}
	}
	return nil
}
func (this *Phase2BMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Phase2BMessage)
	if !ok {
		that2, ok := that.(Phase2BMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.ConfigurationId != that1.ConfigurationId {
		return false
	}
	if !this.Rnd.Equal(that1.Rnd) {
		return false
	}
	if len(this.Endpoints) != len(that1.Endpoints) {
		return false
	}
	for i := range this.Endpoints {
		if !this.Endpoints[i].Equal(that1.Endpoints[i]) {
			return false
		}
	}
	return true
}
func (this *ConsensusResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ConsensusResponse)
	if !ok {
		that2, ok := that.(ConsensusResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ConsensusResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ConsensusResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ConsensusResponse but is not nil && this == nil")
	}
	return nil
}
func (this *ConsensusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusResponse)
	if !ok {
		that2, ok := that.(ConsensusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Metadata) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Metadata")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Metadata but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Metadata but is not nil && this == nil")
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if !bytes.Equal(this.Metadata[i], that1.Metadata[i]) {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	return nil
}
func (this *Metadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !bytes.Equal(this.Metadata[i], that1.Metadata[i]) {
			return false
		}
	}
	return true
}
func (this *ProbeMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ProbeMessage)
	if !ok {
		that2, ok := that.(ProbeMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ProbeMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ProbeMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ProbeMessage but is not nil && this == nil")
	}
	if !this.Sender.Equal(that1.Sender) {
		return fmt.Errorf("Sender this(%v) Not Equal that(%v)", this.Sender, that1.Sender)
	}
	if len(this.Payload) != len(that1.Payload) {
		return fmt.Errorf("Payload this(%v) Not Equal that(%v)", len(this.Payload), len(that1.Payload))
	}
	for i := range this.Payload {
		if !bytes.Equal(this.Payload[i], that1.Payload[i]) {
			return fmt.Errorf("Payload this[%v](%v) Not Equal that[%v](%v)", i, this.Payload[i], i, that1.Payload[i])
		}
	}
	return nil
}
func (this *ProbeMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProbeMessage)
	if !ok {
		that2, ok := that.(ProbeMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if len(this.Payload) != len(that1.Payload) {
		return false
	}
	for i := range this.Payload {
		if !bytes.Equal(this.Payload[i], that1.Payload[i]) {
			return false
		}
	}
	return true
}
func (this *ProbeResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ProbeResponse)
	if !ok {
		that2, ok := that.(ProbeResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ProbeResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ProbeResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ProbeResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	return nil
}
func (this *ProbeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProbeResponse)
	if !ok {
		that2, ok := that.(ProbeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *Endpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&remoting.Endpoint{")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RapidRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&remoting.RapidRequest{")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RapidRequest_PreJoinMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&remoting.RapidRequest_PreJoinMessage{` +
		`PreJoinMessage:` + fmt.Sprintf("%#v", this.PreJoinMessage) + `}`}, ", ")
	return s
}
func (this *RapidRequest_JoinMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&remoting.RapidRequest_JoinMessage{` +
		`JoinMessage:` + fmt.Sprintf("%#v", this.JoinMessage) + `}`}, ", ")
	return s
}
func (this *RapidRequest_BatchedAlertMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&remoting.RapidRequest_BatchedAlertMessage{` +
		`BatchedAlertMessage:` + fmt.Sprintf("%#v", this.BatchedAlertMessage) + `}`}, ", ")
	return s
}
func (this *RapidRequest_ProbeMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&remoting.RapidRequest_ProbeMessage{` +
		`ProbeMessage:` + fmt.Sprintf("%#v", this.ProbeMessage) + `}`}, ", ")
	return s
}
func (this *RapidRequest_FastRoundPhase2BMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&remoting.RapidRequest_FastRoundPhase2BMessage{` +
		`FastRoundPhase2BMessage:` + fmt.Sprintf("%#v", this.FastRoundPhase2BMessage) + `}`}, ", ")
	return s
}
func (this *RapidRequest_Phase1AMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&remoting.RapidRequest_Phase1AMessage{` +
		`Phase1AMessage:` + fmt.Sprintf("%#v", this.Phase1AMessage) + `}`}, ", ")
	return s
}
func (this *RapidRequest_Phase1BMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&remoting.RapidRequest_Phase1BMessage{` +
		`Phase1BMessage:` + fmt.Sprintf("%#v", this.Phase1BMessage) + `}`}, ", ")
	return s
}
func (this *RapidRequest_Phase2AMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&remoting.RapidRequest_Phase2AMessage{` +
		`Phase2AMessage:` + fmt.Sprintf("%#v", this.Phase2AMessage) + `}`}, ", ")
	return s
}
func (this *RapidRequest_Phase2BMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&remoting.RapidRequest_Phase2BMessage{` +
		`Phase2BMessage:` + fmt.Sprintf("%#v", this.Phase2BMessage) + `}`}, ", ")
	return s
}
func (this *RapidResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&remoting.RapidResponse{")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RapidResponse_JoinResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&remoting.RapidResponse_JoinResponse{` +
		`JoinResponse:` + fmt.Sprintf("%#v", this.JoinResponse) + `}`}, ", ")
	return s
}
func (this *RapidResponse_Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&remoting.RapidResponse_Response{` +
		`Response:` + fmt.Sprintf("%#v", this.Response) + `}`}, ", ")
	return s
}
func (this *RapidResponse_ConsensusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&remoting.RapidResponse_ConsensusResponse{` +
		`ConsensusResponse:` + fmt.Sprintf("%#v", this.ConsensusResponse) + `}`}, ", ")
	return s
}
func (this *RapidResponse_ProbeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&remoting.RapidResponse_ProbeResponse{` +
		`ProbeResponse:` + fmt.Sprintf("%#v", this.ProbeResponse) + `}`}, ", ")
	return s
}
func (this *NodeId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&remoting.NodeId{")
	s = append(s, "High: "+fmt.Sprintf("%#v", this.High)+",\n")
	s = append(s, "Low: "+fmt.Sprintf("%#v", this.Low)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PreJoinMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&remoting.PreJoinMessage{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	if this.NodeId != nil {
		s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	}
	s = append(s, "RingNumber: "+fmt.Sprintf("%#v", this.RingNumber)+",\n")
	s = append(s, "ConfigurationId: "+fmt.Sprintf("%#v", this.ConfigurationId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JoinMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&remoting.JoinMessage{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	if this.NodeId != nil {
		s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	}
	s = append(s, "RingNumber: "+fmt.Sprintf("%#v", this.RingNumber)+",\n")
	s = append(s, "ConfigurationId: "+fmt.Sprintf("%#v", this.ConfigurationId)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JoinResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&remoting.JoinResponse{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "StatusCode: "+fmt.Sprintf("%#v", this.StatusCode)+",\n")
	s = append(s, "ConfigurationId: "+fmt.Sprintf("%#v", this.ConfigurationId)+",\n")
	if this.Endpoints != nil {
		s = append(s, "Endpoints: "+fmt.Sprintf("%#v", this.Endpoints)+",\n")
	}
	if this.Identifiers != nil {
		s = append(s, "Identifiers: "+fmt.Sprintf("%#v", this.Identifiers)+",\n")
	}
	keysForClusterMetadata := make([]string, 0, len(this.ClusterMetadata))
	for k, _ := range this.ClusterMetadata {
		keysForClusterMetadata = append(keysForClusterMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForClusterMetadata)
	mapStringForClusterMetadata := "map[string]*Metadata{"
	for _, k := range keysForClusterMetadata {
		mapStringForClusterMetadata += fmt.Sprintf("%#v: %#v,", k, this.ClusterMetadata[k])
	}
	mapStringForClusterMetadata += "}"
	if this.ClusterMetadata != nil {
		s = append(s, "ClusterMetadata: "+mapStringForClusterMetadata+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BatchedAlertMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&remoting.BatchedAlertMessage{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AlertMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&remoting.AlertMessage{")
	if this.EdgeSrc != nil {
		s = append(s, "EdgeSrc: "+fmt.Sprintf("%#v", this.EdgeSrc)+",\n")
	}
	if this.EdgeDst != nil {
		s = append(s, "EdgeDst: "+fmt.Sprintf("%#v", this.EdgeDst)+",\n")
	}
	s = append(s, "EdgeStatus: "+fmt.Sprintf("%#v", this.EdgeStatus)+",\n")
	s = append(s, "ConfigurationId: "+fmt.Sprintf("%#v", this.ConfigurationId)+",\n")
	s = append(s, "RingNumber: "+fmt.Sprintf("%#v", this.RingNumber)+",\n")
	if this.NodeId != nil {
		s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&remoting.Response{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FastRoundPhase2BMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&remoting.FastRoundPhase2BMessage{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "ConfigurationId: "+fmt.Sprintf("%#v", this.ConfigurationId)+",\n")
	if this.Endpoints != nil {
		s = append(s, "Endpoints: "+fmt.Sprintf("%#v", this.Endpoints)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Rank) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&remoting.Rank{")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "NodeIndex: "+fmt.Sprintf("%#v", this.NodeIndex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Phase1AMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&remoting.Phase1AMessage{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "ConfigurationId: "+fmt.Sprintf("%#v", this.ConfigurationId)+",\n")
	if this.Rank != nil {
		s = append(s, "Rank: "+fmt.Sprintf("%#v", this.Rank)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Phase1BMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&remoting.Phase1BMessage{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "ConfigurationId: "+fmt.Sprintf("%#v", this.ConfigurationId)+",\n")
	if this.Rnd != nil {
		s = append(s, "Rnd: "+fmt.Sprintf("%#v", this.Rnd)+",\n")
	}
	if this.Vrnd != nil {
		s = append(s, "Vrnd: "+fmt.Sprintf("%#v", this.Vrnd)+",\n")
	}
	if this.Vval != nil {
		s = append(s, "Vval: "+fmt.Sprintf("%#v", this.Vval)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Phase2AMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&remoting.Phase2AMessage{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "ConfigurationId: "+fmt.Sprintf("%#v", this.ConfigurationId)+",\n")
	if this.Rnd != nil {
		s = append(s, "Rnd: "+fmt.Sprintf("%#v", this.Rnd)+",\n")
	}
	if this.Vval != nil {
		s = append(s, "Vval: "+fmt.Sprintf("%#v", this.Vval)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Phase2BMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&remoting.Phase2BMessage{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "ConfigurationId: "+fmt.Sprintf("%#v", this.ConfigurationId)+",\n")
	if this.Rnd != nil {
		s = append(s, "Rnd: "+fmt.Sprintf("%#v", this.Rnd)+",\n")
	}
	if this.Endpoints != nil {
		s = append(s, "Endpoints: "+fmt.Sprintf("%#v", this.Endpoints)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&remoting.ConsensusResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Metadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&remoting.Metadata{")
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k, _ := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string][]byte{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%#v: %#v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	if this.Metadata != nil {
		s = append(s, "Metadata: "+mapStringForMetadata+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProbeMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&remoting.ProbeMessage{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProbeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&remoting.ProbeResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRapid(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MembershipServiceClient is the client API for MembershipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MembershipServiceClient interface {
	SendRequest(ctx context.Context, in *RapidRequest, opts ...grpc.CallOption) (*RapidResponse, error)
}

type membershipServiceClient struct {
	cc *grpc.ClientConn
}

func NewMembershipServiceClient(cc *grpc.ClientConn) MembershipServiceClient {
	return &membershipServiceClient{cc}
}

func (c *membershipServiceClient) SendRequest(ctx context.Context, in *RapidRequest, opts ...grpc.CallOption) (*RapidResponse, error) {
	out := new(RapidResponse)
	err := c.cc.Invoke(ctx, "/remoting.MembershipService/sendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MembershipServiceServer is the server API for MembershipService service.
type MembershipServiceServer interface {
	SendRequest(context.Context, *RapidRequest) (*RapidResponse, error)
}

// UnimplementedMembershipServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMembershipServiceServer struct {
}

func (*UnimplementedMembershipServiceServer) SendRequest(ctx context.Context, req *RapidRequest) (*RapidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}

func RegisterMembershipServiceServer(s *grpc.Server, srv MembershipServiceServer) {
	s.RegisterService(&_MembershipService_serviceDesc, srv)
}

func _MembershipService_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RapidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipServiceServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remoting.MembershipService/SendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipServiceServer).SendRequest(ctx, req.(*RapidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MembershipService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remoting.MembershipService",
	HandlerType: (*MembershipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendRequest",
			Handler:    _MembershipService_SendRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rapid.proto",
}

func (m *Endpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Endpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRapid(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Port))
	}
	return i, nil
}

func (m *RapidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RapidRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Content != nil {
		nn1, err1 := m.Content.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += nn1
	}
	return i, nil
}

func (m *RapidRequest_PreJoinMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PreJoinMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.PreJoinMessage.Size()))
		n2, err2 := m.PreJoinMessage.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}
func (m *RapidRequest_JoinMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinMessage != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.JoinMessage.Size()))
		n3, err3 := m.JoinMessage.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}
func (m *RapidRequest_BatchedAlertMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchedAlertMessage != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.BatchedAlertMessage.Size()))
		n4, err4 := m.BatchedAlertMessage.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	return i, nil
}
func (m *RapidRequest_ProbeMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ProbeMessage != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.ProbeMessage.Size()))
		n5, err5 := m.ProbeMessage.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	return i, nil
}
func (m *RapidRequest_FastRoundPhase2BMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FastRoundPhase2BMessage != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.FastRoundPhase2BMessage.Size()))
		n6, err6 := m.FastRoundPhase2BMessage.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	return i, nil
}
func (m *RapidRequest_Phase1AMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Phase1AMessage != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Phase1AMessage.Size()))
		n7, err7 := m.Phase1AMessage.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	return i, nil
}
func (m *RapidRequest_Phase1BMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Phase1BMessage != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Phase1BMessage.Size()))
		n8, err8 := m.Phase1BMessage.MarshalTo(dAtA[i:])
		if err8 != nil {
			return 0, err8
		}
		i += n8
	}
	return i, nil
}
func (m *RapidRequest_Phase2AMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Phase2AMessage != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Phase2AMessage.Size()))
		n9, err9 := m.Phase2AMessage.MarshalTo(dAtA[i:])
		if err9 != nil {
			return 0, err9
		}
		i += n9
	}
	return i, nil
}
func (m *RapidRequest_Phase2BMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Phase2BMessage != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Phase2BMessage.Size()))
		n10, err10 := m.Phase2BMessage.MarshalTo(dAtA[i:])
		if err10 != nil {
			return 0, err10
		}
		i += n10
	}
	return i, nil
}
func (m *RapidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RapidResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Content != nil {
		nn11, err11 := m.Content.MarshalTo(dAtA[i:])
		if err11 != nil {
			return 0, err11
		}
		i += nn11
	}
	return i, nil
}

func (m *RapidResponse_JoinResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.JoinResponse.Size()))
		n12, err12 := m.JoinResponse.MarshalTo(dAtA[i:])
		if err12 != nil {
			return 0, err12
		}
		i += n12
	}
	return i, nil
}
func (m *RapidResponse_Response) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Response != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Response.Size()))
		n13, err13 := m.Response.MarshalTo(dAtA[i:])
		if err13 != nil {
			return 0, err13
		}
		i += n13
	}
	return i, nil
}
func (m *RapidResponse_ConsensusResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ConsensusResponse != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.ConsensusResponse.Size()))
		n14, err14 := m.ConsensusResponse.MarshalTo(dAtA[i:])
		if err14 != nil {
			return 0, err14
		}
		i += n14
	}
	return i, nil
}
func (m *RapidResponse_ProbeResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ProbeResponse != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.ProbeResponse.Size()))
		n15, err15 := m.ProbeResponse.MarshalTo(dAtA[i:])
		if err15 != nil {
			return 0, err15
		}
		i += n15
	}
	return i, nil
}
func (m *NodeId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.High != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.High))
	}
	if m.Low != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Low))
	}
	return i, nil
}

func (m *PreJoinMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreJoinMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Sender.Size()))
		n16, err16 := m.Sender.MarshalTo(dAtA[i:])
		if err16 != nil {
			return 0, err16
		}
		i += n16
	}
	if m.NodeId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.NodeId.Size()))
		n17, err17 := m.NodeId.MarshalTo(dAtA[i:])
		if err17 != nil {
			return 0, err17
		}
		i += n17
	}
	if len(m.RingNumber) > 0 {
		dAtA19 := make([]byte, len(m.RingNumber)*10)
		var j18 int
		for _, num1 := range m.RingNumber {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRapid(dAtA, i, uint64(j18))
		i += copy(dAtA[i:], dAtA19[:j18])
	}
	if m.ConfigurationId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.ConfigurationId))
	}
	return i, nil
}

func (m *JoinMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Sender.Size()))
		n20, err20 := m.Sender.MarshalTo(dAtA[i:])
		if err20 != nil {
			return 0, err20
		}
		i += n20
	}
	if m.NodeId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.NodeId.Size()))
		n21, err21 := m.NodeId.MarshalTo(dAtA[i:])
		if err21 != nil {
			return 0, err21
		}
		i += n21
	}
	if len(m.RingNumber) > 0 {
		dAtA23 := make([]byte, len(m.RingNumber)*10)
		var j22 int
		for _, num1 := range m.RingNumber {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRapid(dAtA, i, uint64(j22))
		i += copy(dAtA[i:], dAtA23[:j22])
	}
	if m.ConfigurationId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.ConfigurationId))
	}
	if m.Metadata != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Metadata.Size()))
		n24, err24 := m.Metadata.MarshalTo(dAtA[i:])
		if err24 != nil {
			return 0, err24
		}
		i += n24
	}
	return i, nil
}

func (m *JoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Sender.Size()))
		n25, err25 := m.Sender.MarshalTo(dAtA[i:])
		if err25 != nil {
			return 0, err25
		}
		i += n25
	}
	if m.StatusCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.StatusCode))
	}
	if m.ConfigurationId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.ConfigurationId))
	}
	if len(m.Endpoints) > 0 {
		for _, msg := range m.Endpoints {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRapid(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Identifiers) > 0 {
		for _, msg := range m.Identifiers {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintRapid(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ClusterMetadata) > 0 {
		for k, _ := range m.ClusterMetadata {
			dAtA[i] = 0x32
			i++
			v := m.ClusterMetadata[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRapid(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRapid(uint64(len(k))) + msgSize
			i = encodeVarintRapid(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRapid(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRapid(dAtA, i, uint64(v.Size()))
				n26, err26 := v.MarshalTo(dAtA[i:])
				if err26 != nil {
					return 0, err26
				}
				i += n26
			}
		}
	}
	return i, nil
}

func (m *BatchedAlertMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchedAlertMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Sender.Size()))
		n27, err27 := m.Sender.MarshalTo(dAtA[i:])
		if err27 != nil {
			return 0, err27
		}
		i += n27
	}
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRapid(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AlertMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EdgeSrc != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.EdgeSrc.Size()))
		n28, err28 := m.EdgeSrc.MarshalTo(dAtA[i:])
		if err28 != nil {
			return 0, err28
		}
		i += n28
	}
	if m.EdgeDst != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.EdgeDst.Size()))
		n29, err29 := m.EdgeDst.MarshalTo(dAtA[i:])
		if err29 != nil {
			return 0, err29
		}
		i += n29
	}
	if m.EdgeStatus != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.EdgeStatus))
	}
	if m.ConfigurationId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.ConfigurationId))
	}
	if len(m.RingNumber) > 0 {
		dAtA31 := make([]byte, len(m.RingNumber)*10)
		var j30 int
		for _, num1 := range m.RingNumber {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRapid(dAtA, i, uint64(j30))
		i += copy(dAtA[i:], dAtA31[:j30])
	}
	if m.NodeId != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.NodeId.Size()))
		n32, err32 := m.NodeId.MarshalTo(dAtA[i:])
		if err32 != nil {
			return 0, err32
		}
		i += n32
	}
	if m.Metadata != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Metadata.Size()))
		n33, err33 := m.Metadata.MarshalTo(dAtA[i:])
		if err33 != nil {
			return 0, err33
		}
		i += n33
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FastRoundPhase2BMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FastRoundPhase2BMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Sender.Size()))
		n34, err34 := m.Sender.MarshalTo(dAtA[i:])
		if err34 != nil {
			return 0, err34
		}
		i += n34
	}
	if m.ConfigurationId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.ConfigurationId))
	}
	if len(m.Endpoints) > 0 {
		for _, msg := range m.Endpoints {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRapid(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Rank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Round))
	}
	if m.NodeIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.NodeIndex))
	}
	return i, nil
}

func (m *Phase1AMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Phase1AMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Sender.Size()))
		n35, err35 := m.Sender.MarshalTo(dAtA[i:])
		if err35 != nil {
			return 0, err35
		}
		i += n35
	}
	if m.ConfigurationId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.ConfigurationId))
	}
	if m.Rank != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Rank.Size()))
		n36, err36 := m.Rank.MarshalTo(dAtA[i:])
		if err36 != nil {
			return 0, err36
		}
		i += n36
	}
	return i, nil
}

func (m *Phase1BMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Phase1BMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Sender.Size()))
		n37, err37 := m.Sender.MarshalTo(dAtA[i:])
		if err37 != nil {
			return 0, err37
		}
		i += n37
	}
	if m.ConfigurationId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.ConfigurationId))
	}
	if m.Rnd != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Rnd.Size()))
		n38, err38 := m.Rnd.MarshalTo(dAtA[i:])
		if err38 != nil {
			return 0, err38
		}
		i += n38
	}
	if m.Vrnd != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Vrnd.Size()))
		n39, err39 := m.Vrnd.MarshalTo(dAtA[i:])
		if err39 != nil {
			return 0, err39
		}
		i += n39
	}
	if len(m.Vval) > 0 {
		for _, msg := range m.Vval {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintRapid(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Phase2AMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Phase2AMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Sender.Size()))
		n40, err40 := m.Sender.MarshalTo(dAtA[i:])
		if err40 != nil {
			return 0, err40
		}
		i += n40
	}
	if m.ConfigurationId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.ConfigurationId))
	}
	if m.Rnd != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Rnd.Size()))
		n41, err41 := m.Rnd.MarshalTo(dAtA[i:])
		if err41 != nil {
			return 0, err41
		}
		i += n41
	}
	if len(m.Vval) > 0 {
		for _, msg := range m.Vval {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintRapid(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Phase2BMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Phase2BMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Sender.Size()))
		n42, err42 := m.Sender.MarshalTo(dAtA[i:])
		if err42 != nil {
			return 0, err42
		}
		i += n42
	}
	if m.ConfigurationId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.ConfigurationId))
	}
	if m.Rnd != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Rnd.Size()))
		n43, err43 := m.Rnd.MarshalTo(dAtA[i:])
		if err43 != nil {
			return 0, err43
		}
		i += n43
	}
	if len(m.Endpoints) > 0 {
		for _, msg := range m.Endpoints {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRapid(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ConsensusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0xa
			i++
			v := m.Metadata[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovRapid(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovRapid(uint64(len(k))) + byteSize
			i = encodeVarintRapid(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRapid(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRapid(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	return i, nil
}

func (m *ProbeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProbeMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Sender.Size()))
		n44, err44 := m.Sender.MarshalTo(dAtA[i:])
		if err44 != nil {
			return 0, err44
		}
		i += n44
	}
	if len(m.Payload) > 0 {
		for _, b := range m.Payload {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRapid(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *ProbeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProbeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRapid(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func encodeVarintRapid(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedEndpoint(r randyRapid, easy bool) *Endpoint {
	this := &Endpoint{}
	this.Hostname = string(randStringRapid(r))
	this.Port = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Port *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRapidRequest(r randyRapid, easy bool) *RapidRequest {
	this := &RapidRequest{}
	oneofNumber_Content := []int32{1, 2, 3, 4, 5, 6, 7, 8, 9}[r.Intn(9)]
	switch oneofNumber_Content {
	case 1:
		this.Content = NewPopulatedRapidRequest_PreJoinMessage(r, easy)
	case 2:
		this.Content = NewPopulatedRapidRequest_JoinMessage(r, easy)
	case 3:
		this.Content = NewPopulatedRapidRequest_BatchedAlertMessage(r, easy)
	case 4:
		this.Content = NewPopulatedRapidRequest_ProbeMessage(r, easy)
	case 5:
		this.Content = NewPopulatedRapidRequest_FastRoundPhase2BMessage(r, easy)
	case 6:
		this.Content = NewPopulatedRapidRequest_Phase1AMessage(r, easy)
	case 7:
		this.Content = NewPopulatedRapidRequest_Phase1BMessage(r, easy)
	case 8:
		this.Content = NewPopulatedRapidRequest_Phase2AMessage(r, easy)
	case 9:
		this.Content = NewPopulatedRapidRequest_Phase2BMessage(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRapidRequest_PreJoinMessage(r randyRapid, easy bool) *RapidRequest_PreJoinMessage {
	this := &RapidRequest_PreJoinMessage{}
	this.PreJoinMessage = NewPopulatedPreJoinMessage(r, easy)
	return this
}
func NewPopulatedRapidRequest_JoinMessage(r randyRapid, easy bool) *RapidRequest_JoinMessage {
	this := &RapidRequest_JoinMessage{}
	this.JoinMessage = NewPopulatedJoinMessage(r, easy)
	return this
}
func NewPopulatedRapidRequest_BatchedAlertMessage(r randyRapid, easy bool) *RapidRequest_BatchedAlertMessage {
	this := &RapidRequest_BatchedAlertMessage{}
	this.BatchedAlertMessage = NewPopulatedBatchedAlertMessage(r, easy)
	return this
}
func NewPopulatedRapidRequest_ProbeMessage(r randyRapid, easy bool) *RapidRequest_ProbeMessage {
	this := &RapidRequest_ProbeMessage{}
	this.ProbeMessage = NewPopulatedProbeMessage(r, easy)
	return this
}
func NewPopulatedRapidRequest_FastRoundPhase2BMessage(r randyRapid, easy bool) *RapidRequest_FastRoundPhase2BMessage {
	this := &RapidRequest_FastRoundPhase2BMessage{}
	this.FastRoundPhase2BMessage = NewPopulatedFastRoundPhase2BMessage(r, easy)
	return this
}
func NewPopulatedRapidRequest_Phase1AMessage(r randyRapid, easy bool) *RapidRequest_Phase1AMessage {
	this := &RapidRequest_Phase1AMessage{}
	this.Phase1AMessage = NewPopulatedPhase1AMessage(r, easy)
	return this
}
func NewPopulatedRapidRequest_Phase1BMessage(r randyRapid, easy bool) *RapidRequest_Phase1BMessage {
	this := &RapidRequest_Phase1BMessage{}
	this.Phase1BMessage = NewPopulatedPhase1BMessage(r, easy)
	return this
}
func NewPopulatedRapidRequest_Phase2AMessage(r randyRapid, easy bool) *RapidRequest_Phase2AMessage {
	this := &RapidRequest_Phase2AMessage{}
	this.Phase2AMessage = NewPopulatedPhase2AMessage(r, easy)
	return this
}
func NewPopulatedRapidRequest_Phase2BMessage(r randyRapid, easy bool) *RapidRequest_Phase2BMessage {
	this := &RapidRequest_Phase2BMessage{}
	this.Phase2BMessage = NewPopulatedPhase2BMessage(r, easy)
	return this
}
func NewPopulatedRapidResponse(r randyRapid, easy bool) *RapidResponse {
	this := &RapidResponse{}
	oneofNumber_Content := []int32{1, 2, 3, 4}[r.Intn(4)]
	switch oneofNumber_Content {
	case 1:
		this.Content = NewPopulatedRapidResponse_JoinResponse(r, easy)
	case 2:
		this.Content = NewPopulatedRapidResponse_Response(r, easy)
	case 3:
		this.Content = NewPopulatedRapidResponse_ConsensusResponse(r, easy)
	case 4:
		this.Content = NewPopulatedRapidResponse_ProbeResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRapidResponse_JoinResponse(r randyRapid, easy bool) *RapidResponse_JoinResponse {
	this := &RapidResponse_JoinResponse{}
	this.JoinResponse = NewPopulatedJoinResponse(r, easy)
	return this
}
func NewPopulatedRapidResponse_Response(r randyRapid, easy bool) *RapidResponse_Response {
	this := &RapidResponse_Response{}
	this.Response = NewPopulatedResponse(r, easy)
	return this
}
func NewPopulatedRapidResponse_ConsensusResponse(r randyRapid, easy bool) *RapidResponse_ConsensusResponse {
	this := &RapidResponse_ConsensusResponse{}
	this.ConsensusResponse = NewPopulatedConsensusResponse(r, easy)
	return this
}
func NewPopulatedRapidResponse_ProbeResponse(r randyRapid, easy bool) *RapidResponse_ProbeResponse {
	this := &RapidResponse_ProbeResponse{}
	this.ProbeResponse = NewPopulatedProbeResponse(r, easy)
	return this
}
func NewPopulatedNodeId(r randyRapid, easy bool) *NodeId {
	this := &NodeId{}
	this.High = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.High *= -1
	}
	this.Low = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Low *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPreJoinMessage(r randyRapid, easy bool) *PreJoinMessage {
	this := &PreJoinMessage{}
	if r.Intn(10) != 0 {
		this.Sender = NewPopulatedEndpoint(r, easy)
	}
	if r.Intn(10) != 0 {
		this.NodeId = NewPopulatedNodeId(r, easy)
	}
	v1 := r.Intn(10)
	this.RingNumber = make([]int32, v1)
	for i := 0; i < v1; i++ {
		this.RingNumber[i] = int32(r.Int31())
		if r.Intn(2) == 0 {
			this.RingNumber[i] *= -1
		}
	}
	this.ConfigurationId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ConfigurationId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedJoinMessage(r randyRapid, easy bool) *JoinMessage {
	this := &JoinMessage{}
	if r.Intn(10) != 0 {
		this.Sender = NewPopulatedEndpoint(r, easy)
	}
	if r.Intn(10) != 0 {
		this.NodeId = NewPopulatedNodeId(r, easy)
	}
	v2 := r.Intn(10)
	this.RingNumber = make([]int32, v2)
	for i := 0; i < v2; i++ {
		this.RingNumber[i] = int32(r.Int31())
		if r.Intn(2) == 0 {
			this.RingNumber[i] *= -1
		}
	}
	this.ConfigurationId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ConfigurationId *= -1
	}
	if r.Intn(10) != 0 {
		this.Metadata = NewPopulatedMetadata(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedJoinResponse(r randyRapid, easy bool) *JoinResponse {
	this := &JoinResponse{}
	if r.Intn(10) != 0 {
		this.Sender = NewPopulatedEndpoint(r, easy)
	}
	this.StatusCode = JoinStatusCode([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.ConfigurationId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ConfigurationId *= -1
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Endpoints = make([]*Endpoint, v3)
		for i := 0; i < v3; i++ {
			this.Endpoints[i] = NewPopulatedEndpoint(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Identifiers = make([]*NodeId, v4)
		for i := 0; i < v4; i++ {
			this.Identifiers[i] = NewPopulatedNodeId(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.ClusterMetadata = make(map[string]*Metadata)
		for i := 0; i < v5; i++ {
			this.ClusterMetadata[randStringRapid(r)] = NewPopulatedMetadata(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBatchedAlertMessage(r randyRapid, easy bool) *BatchedAlertMessage {
	this := &BatchedAlertMessage{}
	if r.Intn(10) != 0 {
		this.Sender = NewPopulatedEndpoint(r, easy)
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Messages = make([]*AlertMessage, v6)
		for i := 0; i < v6; i++ {
			this.Messages[i] = NewPopulatedAlertMessage(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAlertMessage(r randyRapid, easy bool) *AlertMessage {
	this := &AlertMessage{}
	if r.Intn(10) != 0 {
		this.EdgeSrc = NewPopulatedEndpoint(r, easy)
	}
	if r.Intn(10) != 0 {
		this.EdgeDst = NewPopulatedEndpoint(r, easy)
	}
	this.EdgeStatus = EdgeStatus([]int32{0, 1}[r.Intn(2)])
	this.ConfigurationId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ConfigurationId *= -1
	}
	v7 := r.Intn(10)
	this.RingNumber = make([]int32, v7)
	for i := 0; i < v7; i++ {
		this.RingNumber[i] = int32(r.Int31())
		if r.Intn(2) == 0 {
			this.RingNumber[i] *= -1
		}
	}
	if r.Intn(10) != 0 {
		this.NodeId = NewPopulatedNodeId(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Metadata = NewPopulatedMetadata(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedResponse(r randyRapid, easy bool) *Response {
	this := &Response{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFastRoundPhase2BMessage(r randyRapid, easy bool) *FastRoundPhase2BMessage {
	this := &FastRoundPhase2BMessage{}
	if r.Intn(10) != 0 {
		this.Sender = NewPopulatedEndpoint(r, easy)
	}
	this.ConfigurationId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ConfigurationId *= -1
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Endpoints = make([]*Endpoint, v8)
		for i := 0; i < v8; i++ {
			this.Endpoints[i] = NewPopulatedEndpoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRank(r randyRapid, easy bool) *Rank {
	this := &Rank{}
	this.Round = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Round *= -1
	}
	this.NodeIndex = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.NodeIndex *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPhase1AMessage(r randyRapid, easy bool) *Phase1AMessage {
	this := &Phase1AMessage{}
	if r.Intn(10) != 0 {
		this.Sender = NewPopulatedEndpoint(r, easy)
	}
	this.ConfigurationId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ConfigurationId *= -1
	}
	if r.Intn(10) != 0 {
		this.Rank = NewPopulatedRank(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPhase1BMessage(r randyRapid, easy bool) *Phase1BMessage {
	this := &Phase1BMessage{}
	if r.Intn(10) != 0 {
		this.Sender = NewPopulatedEndpoint(r, easy)
	}
	this.ConfigurationId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ConfigurationId *= -1
	}
	if r.Intn(10) != 0 {
		this.Rnd = NewPopulatedRank(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Vrnd = NewPopulatedRank(r, easy)
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.Vval = make([]*Endpoint, v9)
		for i := 0; i < v9; i++ {
			this.Vval[i] = NewPopulatedEndpoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPhase2AMessage(r randyRapid, easy bool) *Phase2AMessage {
	this := &Phase2AMessage{}
	if r.Intn(10) != 0 {
		this.Sender = NewPopulatedEndpoint(r, easy)
	}
	this.ConfigurationId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ConfigurationId *= -1
	}
	if r.Intn(10) != 0 {
		this.Rnd = NewPopulatedRank(r, easy)
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Vval = make([]*Endpoint, v10)
		for i := 0; i < v10; i++ {
			this.Vval[i] = NewPopulatedEndpoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPhase2BMessage(r randyRapid, easy bool) *Phase2BMessage {
	this := &Phase2BMessage{}
	if r.Intn(10) != 0 {
		this.Sender = NewPopulatedEndpoint(r, easy)
	}
	this.ConfigurationId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ConfigurationId *= -1
	}
	if r.Intn(10) != 0 {
		this.Rnd = NewPopulatedRank(r, easy)
	}
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.Endpoints = make([]*Endpoint, v11)
		for i := 0; i < v11; i++ {
			this.Endpoints[i] = NewPopulatedEndpoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedConsensusResponse(r randyRapid, easy bool) *ConsensusResponse {
	this := &ConsensusResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMetadata(r randyRapid, easy bool) *Metadata {
	this := &Metadata{}
	if r.Intn(10) != 0 {
		v12 := r.Intn(10)
		this.Metadata = make(map[string][]byte)
		for i := 0; i < v12; i++ {
			v13 := r.Intn(100)
			v14 := randStringRapid(r)
			this.Metadata[v14] = make([]byte, v13)
			for i := 0; i < v13; i++ {
				this.Metadata[v14][i] = byte(r.Intn(256))
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProbeMessage(r randyRapid, easy bool) *ProbeMessage {
	this := &ProbeMessage{}
	if r.Intn(10) != 0 {
		this.Sender = NewPopulatedEndpoint(r, easy)
	}
	v15 := r.Intn(10)
	this.Payload = make([][]byte, v15)
	for i := 0; i < v15; i++ {
		v16 := r.Intn(100)
		this.Payload[i] = make([]byte, v16)
		for j := 0; j < v16; j++ {
			this.Payload[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProbeResponse(r randyRapid, easy bool) *ProbeResponse {
	this := &ProbeResponse{}
	this.Status = NodeStatus([]int32{0, 1}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRapid interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRapid(r randyRapid) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRapid(r randyRapid) string {
	v17 := r.Intn(100)
	tmps := make([]rune, v17)
	for i := 0; i < v17; i++ {
		tmps[i] = randUTF8RuneRapid(r)
	}
	return string(tmps)
}
func randUnrecognizedRapid(r randyRapid, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRapid(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRapid(dAtA []byte, r randyRapid, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRapid(dAtA, uint64(key))
		v18 := r.Int63()
		if r.Intn(2) == 0 {
			v18 *= -1
		}
		dAtA = encodeVarintPopulateRapid(dAtA, uint64(v18))
	case 1:
		dAtA = encodeVarintPopulateRapid(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRapid(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRapid(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRapid(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRapid(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Endpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovRapid(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovRapid(uint64(m.Port))
	}
	return n
}

func (m *RapidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		n += m.Content.Size()
	}
	return n
}

func (m *RapidRequest_PreJoinMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreJoinMessage != nil {
		l = m.PreJoinMessage.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}
func (m *RapidRequest_JoinMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinMessage != nil {
		l = m.JoinMessage.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}
func (m *RapidRequest_BatchedAlertMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchedAlertMessage != nil {
		l = m.BatchedAlertMessage.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}
func (m *RapidRequest_ProbeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProbeMessage != nil {
		l = m.ProbeMessage.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}
func (m *RapidRequest_FastRoundPhase2BMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FastRoundPhase2BMessage != nil {
		l = m.FastRoundPhase2BMessage.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}
func (m *RapidRequest_Phase1AMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phase1AMessage != nil {
		l = m.Phase1AMessage.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}
func (m *RapidRequest_Phase1BMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phase1BMessage != nil {
		l = m.Phase1BMessage.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}
func (m *RapidRequest_Phase2AMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phase2AMessage != nil {
		l = m.Phase2AMessage.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}
func (m *RapidRequest_Phase2BMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phase2BMessage != nil {
		l = m.Phase2BMessage.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}
func (m *RapidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		n += m.Content.Size()
	}
	return n
}

func (m *RapidResponse_JoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinResponse != nil {
		l = m.JoinResponse.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}
func (m *RapidResponse_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}
func (m *RapidResponse_ConsensusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConsensusResponse != nil {
		l = m.ConsensusResponse.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}
func (m *RapidResponse_ProbeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProbeResponse != nil {
		l = m.ProbeResponse.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}
func (m *NodeId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.High != 0 {
		n += 1 + sovRapid(uint64(m.High))
	}
	if m.Low != 0 {
		n += 1 + sovRapid(uint64(m.Low))
	}
	return n
}

func (m *PreJoinMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if m.NodeId != nil {
		l = m.NodeId.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if len(m.RingNumber) > 0 {
		l = 0
		for _, e := range m.RingNumber {
			l += sovRapid(uint64(e))
		}
		n += 1 + sovRapid(uint64(l)) + l
	}
	if m.ConfigurationId != 0 {
		n += 1 + sovRapid(uint64(m.ConfigurationId))
	}
	return n
}

func (m *JoinMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if m.NodeId != nil {
		l = m.NodeId.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if len(m.RingNumber) > 0 {
		l = 0
		for _, e := range m.RingNumber {
			l += sovRapid(uint64(e))
		}
		n += 1 + sovRapid(uint64(l)) + l
	}
	if m.ConfigurationId != 0 {
		n += 1 + sovRapid(uint64(m.ConfigurationId))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}

func (m *JoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if m.StatusCode != 0 {
		n += 1 + sovRapid(uint64(m.StatusCode))
	}
	if m.ConfigurationId != 0 {
		n += 1 + sovRapid(uint64(m.ConfigurationId))
	}
	if len(m.Endpoints) > 0 {
		for _, e := range m.Endpoints {
			l = e.Size()
			n += 1 + l + sovRapid(uint64(l))
		}
	}
	if len(m.Identifiers) > 0 {
		for _, e := range m.Identifiers {
			l = e.Size()
			n += 1 + l + sovRapid(uint64(l))
		}
	}
	if len(m.ClusterMetadata) > 0 {
		for k, v := range m.ClusterMetadata {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRapid(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRapid(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRapid(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BatchedAlertMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovRapid(uint64(l))
		}
	}
	return n
}

func (m *AlertMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EdgeSrc != nil {
		l = m.EdgeSrc.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if m.EdgeDst != nil {
		l = m.EdgeDst.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if m.EdgeStatus != 0 {
		n += 1 + sovRapid(uint64(m.EdgeStatus))
	}
	if m.ConfigurationId != 0 {
		n += 1 + sovRapid(uint64(m.ConfigurationId))
	}
	if len(m.RingNumber) > 0 {
		l = 0
		for _, e := range m.RingNumber {
			l += sovRapid(uint64(e))
		}
		n += 1 + sovRapid(uint64(l)) + l
	}
	if m.NodeId != nil {
		l = m.NodeId.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *FastRoundPhase2BMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if m.ConfigurationId != 0 {
		n += 1 + sovRapid(uint64(m.ConfigurationId))
	}
	if len(m.Endpoints) > 0 {
		for _, e := range m.Endpoints {
			l = e.Size()
			n += 1 + l + sovRapid(uint64(l))
		}
	}
	return n
}

func (m *Rank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Round != 0 {
		n += 1 + sovRapid(uint64(m.Round))
	}
	if m.NodeIndex != 0 {
		n += 1 + sovRapid(uint64(m.NodeIndex))
	}
	return n
}

func (m *Phase1AMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if m.ConfigurationId != 0 {
		n += 1 + sovRapid(uint64(m.ConfigurationId))
	}
	if m.Rank != nil {
		l = m.Rank.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	return n
}

func (m *Phase1BMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if m.ConfigurationId != 0 {
		n += 1 + sovRapid(uint64(m.ConfigurationId))
	}
	if m.Rnd != nil {
		l = m.Rnd.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if m.Vrnd != nil {
		l = m.Vrnd.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if len(m.Vval) > 0 {
		for _, e := range m.Vval {
			l = e.Size()
			n += 1 + l + sovRapid(uint64(l))
		}
	}
	return n
}

func (m *Phase2AMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if m.ConfigurationId != 0 {
		n += 1 + sovRapid(uint64(m.ConfigurationId))
	}
	if m.Rnd != nil {
		l = m.Rnd.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if len(m.Vval) > 0 {
		for _, e := range m.Vval {
			l = e.Size()
			n += 1 + l + sovRapid(uint64(l))
		}
	}
	return n
}

func (m *Phase2BMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if m.ConfigurationId != 0 {
		n += 1 + sovRapid(uint64(m.ConfigurationId))
	}
	if m.Rnd != nil {
		l = m.Rnd.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if len(m.Endpoints) > 0 {
		for _, e := range m.Endpoints {
			l = e.Size()
			n += 1 + l + sovRapid(uint64(l))
		}
	}
	return n
}

func (m *ConsensusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovRapid(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovRapid(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRapid(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ProbeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovRapid(uint64(l))
	}
	if len(m.Payload) > 0 {
		for _, b := range m.Payload {
			l = len(b)
			n += 1 + l + sovRapid(uint64(l))
		}
	}
	return n
}

func (m *ProbeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovRapid(uint64(m.Status))
	}
	return n
}

func sovRapid(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRapid(x uint64) (n int) {
	return sovRapid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Endpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Endpoint{`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RapidRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RapidRequest{`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RapidRequest_PreJoinMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RapidRequest_PreJoinMessage{`,
		`PreJoinMessage:` + strings.Replace(fmt.Sprintf("%v", this.PreJoinMessage), "PreJoinMessage", "PreJoinMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RapidRequest_JoinMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RapidRequest_JoinMessage{`,
		`JoinMessage:` + strings.Replace(fmt.Sprintf("%v", this.JoinMessage), "JoinMessage", "JoinMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RapidRequest_BatchedAlertMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RapidRequest_BatchedAlertMessage{`,
		`BatchedAlertMessage:` + strings.Replace(fmt.Sprintf("%v", this.BatchedAlertMessage), "BatchedAlertMessage", "BatchedAlertMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RapidRequest_ProbeMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RapidRequest_ProbeMessage{`,
		`ProbeMessage:` + strings.Replace(fmt.Sprintf("%v", this.ProbeMessage), "ProbeMessage", "ProbeMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RapidRequest_FastRoundPhase2BMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RapidRequest_FastRoundPhase2BMessage{`,
		`FastRoundPhase2BMessage:` + strings.Replace(fmt.Sprintf("%v", this.FastRoundPhase2BMessage), "FastRoundPhase2BMessage", "FastRoundPhase2BMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RapidRequest_Phase1AMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RapidRequest_Phase1AMessage{`,
		`Phase1AMessage:` + strings.Replace(fmt.Sprintf("%v", this.Phase1AMessage), "Phase1AMessage", "Phase1AMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RapidRequest_Phase1BMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RapidRequest_Phase1BMessage{`,
		`Phase1BMessage:` + strings.Replace(fmt.Sprintf("%v", this.Phase1BMessage), "Phase1BMessage", "Phase1BMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RapidRequest_Phase2AMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RapidRequest_Phase2AMessage{`,
		`Phase2AMessage:` + strings.Replace(fmt.Sprintf("%v", this.Phase2AMessage), "Phase2AMessage", "Phase2AMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RapidRequest_Phase2BMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RapidRequest_Phase2BMessage{`,
		`Phase2BMessage:` + strings.Replace(fmt.Sprintf("%v", this.Phase2BMessage), "Phase2BMessage", "Phase2BMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RapidResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RapidResponse{`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RapidResponse_JoinResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RapidResponse_JoinResponse{`,
		`JoinResponse:` + strings.Replace(fmt.Sprintf("%v", this.JoinResponse), "JoinResponse", "JoinResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RapidResponse_Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RapidResponse_Response{`,
		`Response:` + strings.Replace(fmt.Sprintf("%v", this.Response), "Response", "Response", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RapidResponse_ConsensusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RapidResponse_ConsensusResponse{`,
		`ConsensusResponse:` + strings.Replace(fmt.Sprintf("%v", this.ConsensusResponse), "ConsensusResponse", "ConsensusResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RapidResponse_ProbeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RapidResponse_ProbeResponse{`,
		`ProbeResponse:` + strings.Replace(fmt.Sprintf("%v", this.ProbeResponse), "ProbeResponse", "ProbeResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeId{`,
		`High:` + fmt.Sprintf("%v", this.High) + `,`,
		`Low:` + fmt.Sprintf("%v", this.Low) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PreJoinMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PreJoinMessage{`,
		`Sender:` + strings.Replace(this.Sender.String(), "Endpoint", "Endpoint", 1) + `,`,
		`NodeId:` + strings.Replace(this.NodeId.String(), "NodeId", "NodeId", 1) + `,`,
		`RingNumber:` + fmt.Sprintf("%v", this.RingNumber) + `,`,
		`ConfigurationId:` + fmt.Sprintf("%v", this.ConfigurationId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinMessage{`,
		`Sender:` + strings.Replace(this.Sender.String(), "Endpoint", "Endpoint", 1) + `,`,
		`NodeId:` + strings.Replace(this.NodeId.String(), "NodeId", "NodeId", 1) + `,`,
		`RingNumber:` + fmt.Sprintf("%v", this.RingNumber) + `,`,
		`ConfigurationId:` + fmt.Sprintf("%v", this.ConfigurationId) + `,`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "Metadata", "Metadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEndpoints := "[]*Endpoint{"
	for _, f := range this.Endpoints {
		repeatedStringForEndpoints += strings.Replace(f.String(), "Endpoint", "Endpoint", 1) + ","
	}
	repeatedStringForEndpoints += "}"
	repeatedStringForIdentifiers := "[]*NodeId{"
	for _, f := range this.Identifiers {
		repeatedStringForIdentifiers += strings.Replace(f.String(), "NodeId", "NodeId", 1) + ","
	}
	repeatedStringForIdentifiers += "}"
	keysForClusterMetadata := make([]string, 0, len(this.ClusterMetadata))
	for k, _ := range this.ClusterMetadata {
		keysForClusterMetadata = append(keysForClusterMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForClusterMetadata)
	mapStringForClusterMetadata := "map[string]*Metadata{"
	for _, k := range keysForClusterMetadata {
		mapStringForClusterMetadata += fmt.Sprintf("%v: %v,", k, this.ClusterMetadata[k])
	}
	mapStringForClusterMetadata += "}"
	s := strings.Join([]string{`&JoinResponse{`,
		`Sender:` + strings.Replace(this.Sender.String(), "Endpoint", "Endpoint", 1) + `,`,
		`StatusCode:` + fmt.Sprintf("%v", this.StatusCode) + `,`,
		`ConfigurationId:` + fmt.Sprintf("%v", this.ConfigurationId) + `,`,
		`Endpoints:` + repeatedStringForEndpoints + `,`,
		`Identifiers:` + repeatedStringForIdentifiers + `,`,
		`ClusterMetadata:` + mapStringForClusterMetadata + `,`,
		`}`,
	}, "")
	return s
}
func (this *BatchedAlertMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMessages := "[]*AlertMessage{"
	for _, f := range this.Messages {
		repeatedStringForMessages += strings.Replace(f.String(), "AlertMessage", "AlertMessage", 1) + ","
	}
	repeatedStringForMessages += "}"
	s := strings.Join([]string{`&BatchedAlertMessage{`,
		`Sender:` + strings.Replace(this.Sender.String(), "Endpoint", "Endpoint", 1) + `,`,
		`Messages:` + repeatedStringForMessages + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlertMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AlertMessage{`,
		`EdgeSrc:` + strings.Replace(this.EdgeSrc.String(), "Endpoint", "Endpoint", 1) + `,`,
		`EdgeDst:` + strings.Replace(this.EdgeDst.String(), "Endpoint", "Endpoint", 1) + `,`,
		`EdgeStatus:` + fmt.Sprintf("%v", this.EdgeStatus) + `,`,
		`ConfigurationId:` + fmt.Sprintf("%v", this.ConfigurationId) + `,`,
		`RingNumber:` + fmt.Sprintf("%v", this.RingNumber) + `,`,
		`NodeId:` + strings.Replace(this.NodeId.String(), "NodeId", "NodeId", 1) + `,`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "Metadata", "Metadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response{`,
		`}`,
	}, "")
	return s
}
func (this *FastRoundPhase2BMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEndpoints := "[]*Endpoint{"
	for _, f := range this.Endpoints {
		repeatedStringForEndpoints += strings.Replace(f.String(), "Endpoint", "Endpoint", 1) + ","
	}
	repeatedStringForEndpoints += "}"
	s := strings.Join([]string{`&FastRoundPhase2BMessage{`,
		`Sender:` + strings.Replace(this.Sender.String(), "Endpoint", "Endpoint", 1) + `,`,
		`ConfigurationId:` + fmt.Sprintf("%v", this.ConfigurationId) + `,`,
		`Endpoints:` + repeatedStringForEndpoints + `,`,
		`}`,
	}, "")
	return s
}
func (this *Rank) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Rank{`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`NodeIndex:` + fmt.Sprintf("%v", this.NodeIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Phase1AMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Phase1AMessage{`,
		`Sender:` + strings.Replace(this.Sender.String(), "Endpoint", "Endpoint", 1) + `,`,
		`ConfigurationId:` + fmt.Sprintf("%v", this.ConfigurationId) + `,`,
		`Rank:` + strings.Replace(this.Rank.String(), "Rank", "Rank", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Phase1BMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVval := "[]*Endpoint{"
	for _, f := range this.Vval {
		repeatedStringForVval += strings.Replace(f.String(), "Endpoint", "Endpoint", 1) + ","
	}
	repeatedStringForVval += "}"
	s := strings.Join([]string{`&Phase1BMessage{`,
		`Sender:` + strings.Replace(this.Sender.String(), "Endpoint", "Endpoint", 1) + `,`,
		`ConfigurationId:` + fmt.Sprintf("%v", this.ConfigurationId) + `,`,
		`Rnd:` + strings.Replace(this.Rnd.String(), "Rank", "Rank", 1) + `,`,
		`Vrnd:` + strings.Replace(this.Vrnd.String(), "Rank", "Rank", 1) + `,`,
		`Vval:` + repeatedStringForVval + `,`,
		`}`,
	}, "")
	return s
}
func (this *Phase2AMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVval := "[]*Endpoint{"
	for _, f := range this.Vval {
		repeatedStringForVval += strings.Replace(f.String(), "Endpoint", "Endpoint", 1) + ","
	}
	repeatedStringForVval += "}"
	s := strings.Join([]string{`&Phase2AMessage{`,
		`Sender:` + strings.Replace(this.Sender.String(), "Endpoint", "Endpoint", 1) + `,`,
		`ConfigurationId:` + fmt.Sprintf("%v", this.ConfigurationId) + `,`,
		`Rnd:` + strings.Replace(this.Rnd.String(), "Rank", "Rank", 1) + `,`,
		`Vval:` + repeatedStringForVval + `,`,
		`}`,
	}, "")
	return s
}
func (this *Phase2BMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEndpoints := "[]*Endpoint{"
	for _, f := range this.Endpoints {
		repeatedStringForEndpoints += strings.Replace(f.String(), "Endpoint", "Endpoint", 1) + ","
	}
	repeatedStringForEndpoints += "}"
	s := strings.Join([]string{`&Phase2BMessage{`,
		`Sender:` + strings.Replace(this.Sender.String(), "Endpoint", "Endpoint", 1) + `,`,
		`ConfigurationId:` + fmt.Sprintf("%v", this.ConfigurationId) + `,`,
		`Rnd:` + strings.Replace(this.Rnd.String(), "Rank", "Rank", 1) + `,`,
		`Endpoints:` + repeatedStringForEndpoints + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConsensusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConsensusResponse{`,
		`}`,
	}, "")
	return s
}
func (this *Metadata) String() string {
	if this == nil {
		return "nil"
	}
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k, _ := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string][]byte{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%v: %v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	s := strings.Join([]string{`&Metadata{`,
		`Metadata:` + mapStringForMetadata + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProbeMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProbeMessage{`,
		`Sender:` + strings.Replace(this.Sender.String(), "Endpoint", "Endpoint", 1) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProbeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProbeResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRapid(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Endpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RapidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RapidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RapidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreJoinMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PreJoinMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RapidRequest_PreJoinMessage{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RapidRequest_JoinMessage{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchedAlertMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchedAlertMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RapidRequest_BatchedAlertMessage{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProbeMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RapidRequest_ProbeMessage{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastRoundPhase2BMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FastRoundPhase2BMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RapidRequest_FastRoundPhase2BMessage{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase1AMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Phase1AMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RapidRequest_Phase1AMessage{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase1BMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Phase1BMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RapidRequest_Phase1BMessage{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase2AMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Phase2AMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RapidRequest_Phase2AMessage{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase2BMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Phase2BMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RapidRequest_Phase2BMessage{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RapidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RapidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RapidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RapidResponse_JoinResponse{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Response{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RapidResponse_Response{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConsensusResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RapidResponse_ConsensusResponse{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProbeResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &RapidResponse_ProbeResponse{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			m.High = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.High |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			m.Low = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Low |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreJoinMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreJoinMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreJoinMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &Endpoint{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeId == nil {
				m.NodeId = &NodeId{}
			}
			if err := m.NodeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRapid
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RingNumber = append(m.RingNumber, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRapid
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRapid
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRapid
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RingNumber) == 0 {
					m.RingNumber = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRapid
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RingNumber = append(m.RingNumber, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RingNumber", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigurationId", wireType)
			}
			m.ConfigurationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigurationId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &Endpoint{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeId == nil {
				m.NodeId = &NodeId{}
			}
			if err := m.NodeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRapid
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RingNumber = append(m.RingNumber, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRapid
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRapid
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRapid
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RingNumber) == 0 {
					m.RingNumber = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRapid
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RingNumber = append(m.RingNumber, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RingNumber", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigurationId", wireType)
			}
			m.ConfigurationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigurationId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &Endpoint{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= JoinStatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigurationId", wireType)
			}
			m.ConfigurationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigurationId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, &Endpoint{})
			if err := m.Endpoints[len(m.Endpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifiers = append(m.Identifiers, &NodeId{})
			if err := m.Identifiers[len(m.Identifiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterMetadata == nil {
				m.ClusterMetadata = make(map[string]*Metadata)
			}
			var mapkey string
			var mapvalue *Metadata
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRapid
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRapid
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRapid
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRapid
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRapid
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRapid
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRapid
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Metadata{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRapid(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRapid
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ClusterMetadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchedAlertMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchedAlertMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchedAlertMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &Endpoint{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &AlertMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlertMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdgeSrc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EdgeSrc == nil {
				m.EdgeSrc = &Endpoint{}
			}
			if err := m.EdgeSrc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdgeDst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EdgeDst == nil {
				m.EdgeDst = &Endpoint{}
			}
			if err := m.EdgeDst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdgeStatus", wireType)
			}
			m.EdgeStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EdgeStatus |= EdgeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigurationId", wireType)
			}
			m.ConfigurationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigurationId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRapid
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RingNumber = append(m.RingNumber, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRapid
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRapid
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRapid
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RingNumber) == 0 {
					m.RingNumber = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRapid
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RingNumber = append(m.RingNumber, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RingNumber", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeId == nil {
				m.NodeId = &NodeId{}
			}
			if err := m.NodeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FastRoundPhase2BMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FastRoundPhase2bMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FastRoundPhase2bMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &Endpoint{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigurationId", wireType)
			}
			m.ConfigurationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigurationId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, &Endpoint{})
			if err := m.Endpoints[len(m.Endpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIndex", wireType)
			}
			m.NodeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Phase1AMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Phase1aMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Phase1aMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &Endpoint{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigurationId", wireType)
			}
			m.ConfigurationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigurationId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rank == nil {
				m.Rank = &Rank{}
			}
			if err := m.Rank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Phase1BMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Phase1bMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Phase1bMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &Endpoint{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigurationId", wireType)
			}
			m.ConfigurationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigurationId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rnd == nil {
				m.Rnd = &Rank{}
			}
			if err := m.Rnd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vrnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vrnd == nil {
				m.Vrnd = &Rank{}
			}
			if err := m.Vrnd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vval = append(m.Vval, &Endpoint{})
			if err := m.Vval[len(m.Vval)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Phase2AMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Phase2aMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Phase2aMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &Endpoint{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigurationId", wireType)
			}
			m.ConfigurationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigurationId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rnd == nil {
				m.Rnd = &Rank{}
			}
			if err := m.Rnd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vval = append(m.Vval, &Endpoint{})
			if err := m.Vval[len(m.Vval)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Phase2BMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Phase2bMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Phase2bMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &Endpoint{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigurationId", wireType)
			}
			m.ConfigurationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigurationId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rnd == nil {
				m.Rnd = &Rank{}
			}
			if err := m.Rnd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, &Endpoint{})
			if err := m.Endpoints[len(m.Endpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRapid
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRapid
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRapid
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRapid
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRapid
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthRapid
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthRapid
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRapid(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRapid
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProbeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProbeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProbeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &Endpoint{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRapid
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRapid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload, make([]byte, postIndex-iNdEx))
			copy(m.Payload[len(m.Payload)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProbeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProbeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProbeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= NodeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRapid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRapid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRapid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRapid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRapid
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRapid
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRapid
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRapid(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRapid
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRapid = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRapid   = fmt.Errorf("proto: integer overflow")
)

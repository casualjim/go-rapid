syntax = "proto3";

package remoting;

option java_multiple_files = true;
option java_package = "com.vrg.rapid.pb";
option java_outer_classname = "Remoting";
option go_package = ".;remoting";

service MembershipService {
  rpc sendRequest(RapidRequest) returns (RapidResponse) {}
}

message Endpoint {
  string hostname = 1;
  int32 port = 2;
}

// All-in-one message type.
message RapidRequest {
  oneof content {
    PreJoinMessage preJoinMessage = 1;
    JoinMessage joinMessage = 2;
    BatchedAlertMessage batchedAlertMessage = 3;
    ProbeMessage probeMessage = 4;
    FastRoundPhase2bMessage fastRoundPhase2bMessage = 5;
    Phase1aMessage phase1aMessage = 6;
    Phase1bMessage phase1bMessage = 7;
    Phase2aMessage phase2aMessage = 8;
    Phase2bMessage phase2bMessage = 9;
  }
}

message RapidResponse {
  oneof content {
    JoinResponse joinResponse = 1;
    Response response = 2;
    ConsensusResponse consensusResponse = 3;
    ProbeResponse probeResponse = 4;
  }
}

// ******* Join protocol messages *******

message NodeId {
  int64 high = 1;
  int64 low = 2;
}

// TODO: JoinMessage and JoinResponse are overloaded because they are being used
// for phase 1 and 2 of the bootstrap.
message PreJoinMessage {
  Endpoint sender = 1;
  NodeId nodeId = 2;
  repeated int32 ringNumber = 3;
  int64 configurationId = 4;
}

message JoinMessage {
  Endpoint sender = 1;
  NodeId nodeId = 2;
  repeated int32 ringNumber = 3;
  int64 configurationId = 4;
  Metadata metadata = 5;
}

message JoinResponse {
  Endpoint sender = 1;
  JoinStatusCode statusCode = 2;
  int64 configurationId = 3;
  repeated Endpoint endpoints = 4;
  repeated NodeId identifiers = 5;
  map<string, Metadata> clusterMetadata = 6;
}

enum JoinStatusCode {
  HOSTNAME_ALREADY_IN_RING = 0;
  UUID_ALREADY_IN_RING = 1;
  SAFE_TO_JOIN = 2;
  CONFIG_CHANGED = 3;
  MEMBERSHIP_REJECTED = 4;
};

// ******* Alert messages *******

message BatchedAlertMessage {
  Endpoint sender = 1;
  repeated AlertMessage messages = 3;
}

message AlertMessage {
  Endpoint edgeSrc = 1;
  Endpoint edgeDst = 2;
  EdgeStatus edgeStatus = 3;
  int64 configurationId = 4;
  repeated int32 ringNumber = 5;
  NodeId nodeId = 6;     // Required only for join protocol
  Metadata metadata = 7; // Required only for join protocol
}

enum EdgeStatus {
  UP = 0;
  DOWN = 1;
};

message Response {}

// ******* Fast Paxos Phase 2 message *******

message FastRoundPhase2bMessage {
  Endpoint sender = 1;
  int64 configurationId = 2;
  repeated Endpoint endpoints = 3;
}

// ******* Classic Paxos messages *********
message Rank {
  int32 round = 1;
  int32 nodeIndex = 2;
}

message Phase1aMessage {
  Endpoint sender = 1;
  int64 configurationId = 2;
  Rank rank = 3;
}

message Phase1bMessage {
  Endpoint sender = 1;
  int64 configurationId = 2;
  Rank rnd = 3;
  Rank vrnd = 4;
  repeated Endpoint vval = 5;
}

message Phase2aMessage {
  Endpoint sender = 1;
  int64 configurationId = 2;
  Rank rnd = 3;
  repeated Endpoint vval = 5;
}

message Phase2bMessage {
  Endpoint sender = 1;
  int64 configurationId = 2;
  Rank rnd = 3;
  repeated Endpoint endpoints = 4;
}

message ConsensusResponse {}

// ******* Node Metadata *********
message Metadata { map<string, bytes> metadata = 1; }

// ******* Used by simple probing failure detector *******

message ProbeMessage {
  Endpoint sender = 1;
  repeated bytes payload = 3;
}

message ProbeResponse { NodeStatus status = 1; }

enum NodeStatus {
  OK = 0; // this is the default value
  BOOTSTRAPPING = 1;
};

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/casualjim/go-rapid/linkfailure (interfaces: Detector)

package linkfailure

import (
	context "context"

	node "github.com/casualjim/go-rapid/node"
	remoting "github.com/casualjim/go-rapid/remoting"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Detector interface
type MockDetector struct {
	ctrl     *gomock.Controller
	recorder *_MockDetectorRecorder
}

// Recorder for MockDetector (not exported)
type _MockDetectorRecorder struct {
	mock *MockDetector
}

func NewMockDetector(ctrl *gomock.Controller) *MockDetector {
	mock := &MockDetector{ctrl: ctrl}
	mock.recorder = &_MockDetectorRecorder{mock}
	return mock
}

func (_m *MockDetector) EXPECT() *_MockDetectorRecorder {
	return _m.recorder
}

func (_m *MockDetector) CheckMonitoree(_param0 context.Context, _param1 node.Addr) error {
	ret := _m.ctrl.Call(_m, "CheckMonitoree", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDetectorRecorder) CheckMonitoree(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckMonitoree", arg0, arg1)
}

func (_m *MockDetector) HandleProbe(_param0 *remoting.ProbeMessage) *remoting.ProbeResponse {
	ret := _m.ctrl.Call(_m, "HandleProbe", _param0)
	ret0, _ := ret[0].(*remoting.ProbeResponse)
	return ret0
}

func (_mr *_MockDetectorRecorder) HandleProbe(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HandleProbe", arg0)
}

func (_m *MockDetector) HasFailed(_param0 node.Addr) bool {
	ret := _m.ctrl.Call(_m, "HasFailed", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockDetectorRecorder) HasFailed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HasFailed", arg0)
}

func (_m *MockDetector) OnMembershipChange(_param0 []node.Addr) {
	_m.ctrl.Call(_m, "OnMembershipChange", _param0)
}

func (_mr *_MockDetectorRecorder) OnMembershipChange(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnMembershipChange", arg0)
}

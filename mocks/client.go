// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/casualjim/go-rapid (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	node "github.com/casualjim/go-rapid/node"
	remoting "github.com/casualjim/go-rapid/remoting"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockClient) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Do mocks base method
func (m *MockClient) Do(arg0 context.Context, arg1 node.Addr, arg2 *remoting.RapidRequest) (*remoting.RapidResponse, error) {
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2)
	ret0, _ := ret[0].(*remoting.RapidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockClientMockRecorder) Do(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockClient)(nil).Do), arg0, arg1, arg2)
}

// DoBestEffort mocks base method
func (m *MockClient) DoBestEffort(arg0 context.Context, arg1 node.Addr, arg2 *remoting.RapidRequest) (*remoting.RapidResponse, error) {
	ret := m.ctrl.Call(m, "DoBestEffort", arg0, arg1, arg2)
	ret0, _ := ret[0].(*remoting.RapidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoBestEffort indicates an expected call of DoBestEffort
func (mr *MockClientMockRecorder) DoBestEffort(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoBestEffort", reflect.TypeOf((*MockClient)(nil).DoBestEffort), arg0, arg1, arg2)
}
